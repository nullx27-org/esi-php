<?php
/**
 * GetIndustrySystemsCostIndice
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.9.dev1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\Models;

use \ArrayAccess;

/**
 * GetIndustrySystemsCostIndice Class Doc Comment
 *
 * @category    Class */
 // @description cost_indice object
/**
 * @package     nullx27\ESI
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetIndustrySystemsCostIndice implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'get_industry_systems_cost_indice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activity' => 'string',
        'costIndex' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'activity' => 'activity',
        'costIndex' => 'cost_index'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'activity' => 'setActivity',
        'costIndex' => 'setCostIndex'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'activity' => 'getActivity',
        'costIndex' => 'getCostIndex'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ACTIVITY_NONE = 'none';
    const ACTIVITY_MANUFACTURING = 'manufacturing';
    const ACTIVITY_RESEARCHING_TECHNOLOGY = 'researching_technology';
    const ACTIVITY_RESEARCHING_TIME_EFFICIENCY = 'researching_time_efficiency';
    const ACTIVITY_RESEARCHING_MATERIAL_EFFICIENCY = 'researching_material_efficiency';
    const ACTIVITY_COPYING = 'copying';
    const ACTIVITY_DUPLICATING = 'duplicating';
    const ACTIVITY_INVENTION = 'invention';
    const ACTIVITY_REVERSE_ENGINEERING = 'reverse_engineering';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getActivityAllowableValues()
    {
        return [
            self::ACTIVITY_NONE,
            self::ACTIVITY_MANUFACTURING,
            self::ACTIVITY_RESEARCHING_TECHNOLOGY,
            self::ACTIVITY_RESEARCHING_TIME_EFFICIENCY,
            self::ACTIVITY_RESEARCHING_MATERIAL_EFFICIENCY,
            self::ACTIVITY_COPYING,
            self::ACTIVITY_DUPLICATING,
            self::ACTIVITY_INVENTION,
            self::ACTIVITY_REVERSE_ENGINEERING,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['costIndex'] = isset($data['costIndex']) ? $data['costIndex'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['activity'] === null) {
            $invalid_properties[] = "'activity' can't be null";
        }
        $allowed_values = ["none", "manufacturing", "researching_technology", "researching_time_efficiency", "researching_material_efficiency", "copying", "duplicating", "invention", "reverse_engineering"];
        if (!in_array($this->container['activity'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'activity', must be one of #{allowed_values}.";
        }

        if ($this->container['costIndex'] === null) {
            $invalid_properties[] = "'costIndex' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['activity'] === null) {
            return false;
        }
        $allowed_values = ["none", "manufacturing", "researching_technology", "researching_time_efficiency", "researching_material_efficiency", "copying", "duplicating", "invention", "reverse_engineering"];
        if (!in_array($this->container['activity'], $allowed_values)) {
            return false;
        }
        if ($this->container['costIndex'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets activity
     * @return string
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     * @param string $activity activity string
     * @return $this
     */
    public function setActivity($activity)
    {
        $allowed_values = array('none', 'manufacturing', 'researching_technology', 'researching_time_efficiency', 'researching_material_efficiency', 'copying', 'duplicating', 'invention', 'reverse_engineering');
        if ((!in_array($activity, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'activity', must be one of 'none', 'manufacturing', 'researching_technology', 'researching_time_efficiency', 'researching_material_efficiency', 'copying', 'duplicating', 'invention', 'reverse_engineering'");
        }
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets costIndex
     * @return float
     */
    public function getCostIndex()
    {
        return $this->container['costIndex'];
    }

    /**
     * Sets costIndex
     * @param float $costIndex cost_index number
     * @return $this
     */
    public function setCostIndex($costIndex)
    {
        $this->container['costIndex'] = $costIndex;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\nullx27\ESI\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\nullx27\ESI\ObjectSerializer::sanitizeForSerialization($this));
    }
}


