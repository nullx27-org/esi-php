<?php
/**
 * GetLoyaltyStoresCorporationIdOffers200Ok
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.2.dev16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\Models;

use \ArrayAccess;

/**
 * GetLoyaltyStoresCorporationIdOffers200Ok Class Doc Comment
 *
 * @category    Class */
 // @description 200 ok object
/**
 * @package     nullx27\ESI
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetLoyaltyStoresCorporationIdOffers200Ok implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'get_loyalty_stores_corporation_id_offers_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'iskCost' => 'float',
        'lpCost' => 'int',
        'offerId' => 'int',
        'quantity' => 'int',
        'requiredItems' => '\nullx27\ESI\Models\GetLoyaltyStoresCorporationIdOffersRequiredItem[]',
        'typeId' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'iskCost' => 'isk_cost',
        'lpCost' => 'lp_cost',
        'offerId' => 'offer_id',
        'quantity' => 'quantity',
        'requiredItems' => 'required_items',
        'typeId' => 'type_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'iskCost' => 'setIskCost',
        'lpCost' => 'setLpCost',
        'offerId' => 'setOfferId',
        'quantity' => 'setQuantity',
        'requiredItems' => 'setRequiredItems',
        'typeId' => 'setTypeId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'iskCost' => 'getIskCost',
        'lpCost' => 'getLpCost',
        'offerId' => 'getOfferId',
        'quantity' => 'getQuantity',
        'requiredItems' => 'getRequiredItems',
        'typeId' => 'getTypeId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['iskCost'] = isset($data['iskCost']) ? $data['iskCost'] : null;
        $this->container['lpCost'] = isset($data['lpCost']) ? $data['lpCost'] : null;
        $this->container['offerId'] = isset($data['offerId']) ? $data['offerId'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['requiredItems'] = isset($data['requiredItems']) ? $data['requiredItems'] : null;
        $this->container['typeId'] = isset($data['typeId']) ? $data['typeId'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['iskCost'] === null) {
            $invalid_properties[] = "'iskCost' can't be null";
        }
        if ($this->container['lpCost'] === null) {
            $invalid_properties[] = "'lpCost' can't be null";
        }
        if ($this->container['offerId'] === null) {
            $invalid_properties[] = "'offerId' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalid_properties[] = "'quantity' can't be null";
        }
        if ($this->container['requiredItems'] === null) {
            $invalid_properties[] = "'requiredItems' can't be null";
        }
        if ($this->container['typeId'] === null) {
            $invalid_properties[] = "'typeId' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['iskCost'] === null) {
            return false;
        }
        if ($this->container['lpCost'] === null) {
            return false;
        }
        if ($this->container['offerId'] === null) {
            return false;
        }
        if ($this->container['quantity'] === null) {
            return false;
        }
        if ($this->container['requiredItems'] === null) {
            return false;
        }
        if ($this->container['typeId'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets iskCost
     * @return float
     */
    public function getIskCost()
    {
        return $this->container['iskCost'];
    }

    /**
     * Sets iskCost
     * @param float $iskCost isk_cost number
     * @return $this
     */
    public function setIskCost($iskCost)
    {
        $this->container['iskCost'] = $iskCost;

        return $this;
    }

    /**
     * Gets lpCost
     * @return int
     */
    public function getLpCost()
    {
        return $this->container['lpCost'];
    }

    /**
     * Sets lpCost
     * @param int $lpCost lp_cost integer
     * @return $this
     */
    public function setLpCost($lpCost)
    {
        $this->container['lpCost'] = $lpCost;

        return $this;
    }

    /**
     * Gets offerId
     * @return int
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     * @param int $offerId offer_id integer
     * @return $this
     */
    public function setOfferId($offerId)
    {
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity quantity integer
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets requiredItems
     * @return \nullx27\ESI\Models\GetLoyaltyStoresCorporationIdOffersRequiredItem[]
     */
    public function getRequiredItems()
    {
        return $this->container['requiredItems'];
    }

    /**
     * Sets requiredItems
     * @param \nullx27\ESI\Models\GetLoyaltyStoresCorporationIdOffersRequiredItem[] $requiredItems required_items array
     * @return $this
     */
    public function setRequiredItems($requiredItems)
    {
        $this->container['requiredItems'] = $requiredItems;

        return $this;
    }

    /**
     * Gets typeId
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     * @param int $typeId type_id integer
     * @return $this
     */
    public function setTypeId($typeId)
    {
        $this->container['typeId'] = $typeId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\nullx27\ESI\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\nullx27\ESI\ObjectSerializer::sanitizeForSerialization($this));
    }
}


