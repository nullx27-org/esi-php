<?php
/**
 * GetKillmailsKillmailIdKillmailHashOkAttackers
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.10.dev17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\Models;

use \ArrayAccess;

/**
 * GetKillmailsKillmailIdKillmailHashOkAttackers Class Doc Comment
 *
 * @category    Class */
 // @description attacker object
/** 
 * @package     nullx27\ESI
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetKillmailsKillmailIdKillmailHashOkAttackers implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'get_killmails_killmail_id_killmail_hash_ok_attackers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'allianceId' => 'int',
        'characterId' => 'int',
        'corporationId' => 'int',
        'damageDone' => 'int',
        'factionId' => 'int',
        'finalBlow' => 'bool',
        'securityStatus' => 'float',
        'shipTypeId' => 'int',
        'weaponTypeId' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'allianceId' => 'alliance_id',
        'characterId' => 'character_id',
        'corporationId' => 'corporation_id',
        'damageDone' => 'damage_done',
        'factionId' => 'faction_id',
        'finalBlow' => 'final_blow',
        'securityStatus' => 'security_status',
        'shipTypeId' => 'ship_type_id',
        'weaponTypeId' => 'weapon_type_id'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'allianceId' => 'setAllianceId',
        'characterId' => 'setCharacterId',
        'corporationId' => 'setCorporationId',
        'damageDone' => 'setDamageDone',
        'factionId' => 'setFactionId',
        'finalBlow' => 'setFinalBlow',
        'securityStatus' => 'setSecurityStatus',
        'shipTypeId' => 'setShipTypeId',
        'weaponTypeId' => 'setWeaponTypeId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'allianceId' => 'getAllianceId',
        'characterId' => 'getCharacterId',
        'corporationId' => 'getCorporationId',
        'damageDone' => 'getDamageDone',
        'factionId' => 'getFactionId',
        'finalBlow' => 'getFinalBlow',
        'securityStatus' => 'getSecurityStatus',
        'shipTypeId' => 'getShipTypeId',
        'weaponTypeId' => 'getWeaponTypeId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allianceId'] = isset($data['allianceId']) ? $data['allianceId'] : null;
        $this->container['characterId'] = isset($data['characterId']) ? $data['characterId'] : null;
        $this->container['corporationId'] = isset($data['corporationId']) ? $data['corporationId'] : null;
        $this->container['damageDone'] = isset($data['damageDone']) ? $data['damageDone'] : null;
        $this->container['factionId'] = isset($data['factionId']) ? $data['factionId'] : null;
        $this->container['finalBlow'] = isset($data['finalBlow']) ? $data['finalBlow'] : null;
        $this->container['securityStatus'] = isset($data['securityStatus']) ? $data['securityStatus'] : null;
        $this->container['shipTypeId'] = isset($data['shipTypeId']) ? $data['shipTypeId'] : null;
        $this->container['weaponTypeId'] = isset($data['weaponTypeId']) ? $data['weaponTypeId'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['damageDone'] === null) {
            $invalid_properties[] = "'damageDone' can't be null";
        }
        if ($this->container['finalBlow'] === null) {
            $invalid_properties[] = "'finalBlow' can't be null";
        }
        if ($this->container['securityStatus'] === null) {
            $invalid_properties[] = "'securityStatus' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['damageDone'] === null) {
            return false;
        }
        if ($this->container['finalBlow'] === null) {
            return false;
        }
        if ($this->container['securityStatus'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets allianceId
     * @return int
     */
    public function getAllianceId()
    {
        return $this->container['allianceId'];
    }

    /**
     * Sets allianceId
     * @param int $allianceId alliance_id integer
     * @return $this
     */
    public function setAllianceId($allianceId)
    {
        $this->container['allianceId'] = $allianceId;

        return $this;
    }

    /**
     * Gets characterId
     * @return int
     */
    public function getCharacterId()
    {
        return $this->container['characterId'];
    }

    /**
     * Sets characterId
     * @param int $characterId character_id integer
     * @return $this
     */
    public function setCharacterId($characterId)
    {
        $this->container['characterId'] = $characterId;

        return $this;
    }

    /**
     * Gets corporationId
     * @return int
     */
    public function getCorporationId()
    {
        return $this->container['corporationId'];
    }

    /**
     * Sets corporationId
     * @param int $corporationId corporation_id integer
     * @return $this
     */
    public function setCorporationId($corporationId)
    {
        $this->container['corporationId'] = $corporationId;

        return $this;
    }

    /**
     * Gets damageDone
     * @return int
     */
    public function getDamageDone()
    {
        return $this->container['damageDone'];
    }

    /**
     * Sets damageDone
     * @param int $damageDone damage_done integer
     * @return $this
     */
    public function setDamageDone($damageDone)
    {
        $this->container['damageDone'] = $damageDone;

        return $this;
    }

    /**
     * Gets factionId
     * @return int
     */
    public function getFactionId()
    {
        return $this->container['factionId'];
    }

    /**
     * Sets factionId
     * @param int $factionId faction_id integer
     * @return $this
     */
    public function setFactionId($factionId)
    {
        $this->container['factionId'] = $factionId;

        return $this;
    }

    /**
     * Gets finalBlow
     * @return bool
     */
    public function getFinalBlow()
    {
        return $this->container['finalBlow'];
    }

    /**
     * Sets finalBlow
     * @param bool $finalBlow Was the attacker the one to achieve the final blow
     * @return $this
     */
    public function setFinalBlow($finalBlow)
    {
        $this->container['finalBlow'] = $finalBlow;

        return $this;
    }

    /**
     * Gets securityStatus
     * @return float
     */
    public function getSecurityStatus()
    {
        return $this->container['securityStatus'];
    }

    /**
     * Sets securityStatus
     * @param float $securityStatus Security status for the attacker
     * @return $this
     */
    public function setSecurityStatus($securityStatus)
    {
        $this->container['securityStatus'] = $securityStatus;

        return $this;
    }

    /**
     * Gets shipTypeId
     * @return int
     */
    public function getShipTypeId()
    {
        return $this->container['shipTypeId'];
    }

    /**
     * Sets shipTypeId
     * @param int $shipTypeId What ship was the attacker flying
     * @return $this
     */
    public function setShipTypeId($shipTypeId)
    {
        $this->container['shipTypeId'] = $shipTypeId;

        return $this;
    }

    /**
     * Gets weaponTypeId
     * @return int
     */
    public function getWeaponTypeId()
    {
        return $this->container['weaponTypeId'];
    }

    /**
     * Sets weaponTypeId
     * @param int $weaponTypeId What weapon was used by the attacker for the kill
     * @return $this
     */
    public function setWeaponTypeId($weaponTypeId)
    {
        $this->container['weaponTypeId'] = $weaponTypeId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\nullx27\ESI\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\nullx27\ESI\ObjectSerializer::sanitizeForSerialization($this));
    }
}


