<?php
/**
 * GetCorporationsCorporationIdOk
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.2.dev16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\Models;

use \ArrayAccess;

/**
 * GetCorporationsCorporationIdOk Class Doc Comment
 *
 * @category    Class */
 // @description 200 ok object
/**
 * @package     nullx27\ESI
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetCorporationsCorporationIdOk implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'get_corporations_corporation_id_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allianceId' => 'int',
        'ceoId' => 'int',
        'corporationDescription' => 'string',
        'corporationName' => 'string',
        'creationDate' => '\DateTime',
        'creatorId' => 'int',
        'faction' => 'string',
        'memberCount' => 'int',
        'taxRate' => 'float',
        'ticker' => 'string',
        'url' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'allianceId' => 'alliance_id',
        'ceoId' => 'ceo_id',
        'corporationDescription' => 'corporation_description',
        'corporationName' => 'corporation_name',
        'creationDate' => 'creation_date',
        'creatorId' => 'creator_id',
        'faction' => 'faction',
        'memberCount' => 'member_count',
        'taxRate' => 'tax_rate',
        'ticker' => 'ticker',
        'url' => 'url'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'allianceId' => 'setAllianceId',
        'ceoId' => 'setCeoId',
        'corporationDescription' => 'setCorporationDescription',
        'corporationName' => 'setCorporationName',
        'creationDate' => 'setCreationDate',
        'creatorId' => 'setCreatorId',
        'faction' => 'setFaction',
        'memberCount' => 'setMemberCount',
        'taxRate' => 'setTaxRate',
        'ticker' => 'setTicker',
        'url' => 'setUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'allianceId' => 'getAllianceId',
        'ceoId' => 'getCeoId',
        'corporationDescription' => 'getCorporationDescription',
        'corporationName' => 'getCorporationName',
        'creationDate' => 'getCreationDate',
        'creatorId' => 'getCreatorId',
        'faction' => 'getFaction',
        'memberCount' => 'getMemberCount',
        'taxRate' => 'getTaxRate',
        'ticker' => 'getTicker',
        'url' => 'getUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const FACTION_MINMATAR = 'Minmatar';
    const FACTION_GALLENTE = 'Gallente';
    const FACTION_CALDARI = 'Caldari';
    const FACTION_AMARR = 'Amarr';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFactionAllowableValues()
    {
        return [
            self::FACTION_MINMATAR,
            self::FACTION_GALLENTE,
            self::FACTION_CALDARI,
            self::FACTION_AMARR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allianceId'] = isset($data['allianceId']) ? $data['allianceId'] : null;
        $this->container['ceoId'] = isset($data['ceoId']) ? $data['ceoId'] : null;
        $this->container['corporationDescription'] = isset($data['corporationDescription']) ? $data['corporationDescription'] : null;
        $this->container['corporationName'] = isset($data['corporationName']) ? $data['corporationName'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['creatorId'] = isset($data['creatorId']) ? $data['creatorId'] : null;
        $this->container['faction'] = isset($data['faction']) ? $data['faction'] : null;
        $this->container['memberCount'] = isset($data['memberCount']) ? $data['memberCount'] : null;
        $this->container['taxRate'] = isset($data['taxRate']) ? $data['taxRate'] : null;
        $this->container['ticker'] = isset($data['ticker']) ? $data['ticker'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['ceoId'] === null) {
            $invalid_properties[] = "'ceoId' can't be null";
        }
        if ($this->container['corporationDescription'] === null) {
            $invalid_properties[] = "'corporationDescription' can't be null";
        }
        if ($this->container['corporationName'] === null) {
            $invalid_properties[] = "'corporationName' can't be null";
        }
        if ($this->container['creatorId'] === null) {
            $invalid_properties[] = "'creatorId' can't be null";
        }
        $allowed_values = ["Minmatar", "Gallente", "Caldari", "Amarr"];
        if (!in_array($this->container['faction'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'faction', must be one of #{allowed_values}.";
        }

        if ($this->container['memberCount'] === null) {
            $invalid_properties[] = "'memberCount' can't be null";
        }
        if ($this->container['taxRate'] === null) {
            $invalid_properties[] = "'taxRate' can't be null";
        }
        if (($this->container['taxRate'] > 1)) {
            $invalid_properties[] = "invalid value for 'taxRate', must be smaller than or equal to 1.";
        }

        if (($this->container['taxRate'] < 0)) {
            $invalid_properties[] = "invalid value for 'taxRate', must be bigger than or equal to 0.";
        }

        if ($this->container['ticker'] === null) {
            $invalid_properties[] = "'ticker' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalid_properties[] = "'url' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['ceoId'] === null) {
            return false;
        }
        if ($this->container['corporationDescription'] === null) {
            return false;
        }
        if ($this->container['corporationName'] === null) {
            return false;
        }
        if ($this->container['creatorId'] === null) {
            return false;
        }
        $allowed_values = ["Minmatar", "Gallente", "Caldari", "Amarr"];
        if (!in_array($this->container['faction'], $allowed_values)) {
            return false;
        }
        if ($this->container['memberCount'] === null) {
            return false;
        }
        if ($this->container['taxRate'] === null) {
            return false;
        }
        if ($this->container['taxRate'] > 1) {
            return false;
        }
        if ($this->container['taxRate'] < 0) {
            return false;
        }
        if ($this->container['ticker'] === null) {
            return false;
        }
        if ($this->container['url'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets allianceId
     * @return int
     */
    public function getAllianceId()
    {
        return $this->container['allianceId'];
    }

    /**
     * Sets allianceId
     * @param int $allianceId id of alliance that corporation is a member of, if any
     * @return $this
     */
    public function setAllianceId($allianceId)
    {
        $this->container['allianceId'] = $allianceId;

        return $this;
    }

    /**
     * Gets ceoId
     * @return int
     */
    public function getCeoId()
    {
        return $this->container['ceoId'];
    }

    /**
     * Sets ceoId
     * @param int $ceoId ceo_id integer
     * @return $this
     */
    public function setCeoId($ceoId)
    {
        $this->container['ceoId'] = $ceoId;

        return $this;
    }

    /**
     * Gets corporationDescription
     * @return string
     */
    public function getCorporationDescription()
    {
        return $this->container['corporationDescription'];
    }

    /**
     * Sets corporationDescription
     * @param string $corporationDescription corporation_description string
     * @return $this
     */
    public function setCorporationDescription($corporationDescription)
    {
        $this->container['corporationDescription'] = $corporationDescription;

        return $this;
    }

    /**
     * Gets corporationName
     * @return string
     */
    public function getCorporationName()
    {
        return $this->container['corporationName'];
    }

    /**
     * Sets corporationName
     * @param string $corporationName the full name of the corporation
     * @return $this
     */
    public function setCorporationName($corporationName)
    {
        $this->container['corporationName'] = $corporationName;

        return $this;
    }

    /**
     * Gets creationDate
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     * @param \DateTime $creationDate creation_date string
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets creatorId
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creatorId'];
    }

    /**
     * Sets creatorId
     * @param int $creatorId creator_id integer
     * @return $this
     */
    public function setCreatorId($creatorId)
    {
        $this->container['creatorId'] = $creatorId;

        return $this;
    }

    /**
     * Gets faction
     * @return string
     */
    public function getFaction()
    {
        return $this->container['faction'];
    }

    /**
     * Sets faction
     * @param string $faction faction string
     * @return $this
     */
    public function setFaction($faction)
    {
        $allowed_values = array('Minmatar', 'Gallente', 'Caldari', 'Amarr');
        if (!is_null($faction) && (!in_array($faction, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'faction', must be one of 'Minmatar', 'Gallente', 'Caldari', 'Amarr'");
        }
        $this->container['faction'] = $faction;

        return $this;
    }

    /**
     * Gets memberCount
     * @return int
     */
    public function getMemberCount()
    {
        return $this->container['memberCount'];
    }

    /**
     * Sets memberCount
     * @param int $memberCount member_count integer
     * @return $this
     */
    public function setMemberCount($memberCount)
    {
        $this->container['memberCount'] = $memberCount;

        return $this;
    }

    /**
     * Gets taxRate
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['taxRate'];
    }

    /**
     * Sets taxRate
     * @param float $taxRate tax_rate number
     * @return $this
     */
    public function setTaxRate($taxRate)
    {

        if (($taxRate > 1)) {
            throw new \InvalidArgumentException('invalid value for $taxRate when calling GetCorporationsCorporationIdOk., must be smaller than or equal to 1.');
        }
        if (($taxRate < 0)) {
            throw new \InvalidArgumentException('invalid value for $taxRate when calling GetCorporationsCorporationIdOk., must be bigger than or equal to 0.');
        }

        $this->container['taxRate'] = $taxRate;

        return $this;
    }

    /**
     * Gets ticker
     * @return string
     */
    public function getTicker()
    {
        return $this->container['ticker'];
    }

    /**
     * Sets ticker
     * @param string $ticker the short name of the corporation
     * @return $this
     */
    public function setTicker($ticker)
    {
        $this->container['ticker'] = $ticker;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url url string
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\nullx27\ESI\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\nullx27\ESI\ObjectSerializer::sanitizeForSerialization($this));
    }
}


