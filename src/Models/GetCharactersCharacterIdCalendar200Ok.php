<?php
/**
 * GetCharactersCharacterIdCalendar200Ok
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.9.dev1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\Models;

use \ArrayAccess;

/**
 * GetCharactersCharacterIdCalendar200Ok Class Doc Comment
 *
 * @category    Class */
 // @description event
/**
 * @package     nullx27\ESI
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetCharactersCharacterIdCalendar200Ok implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'get_characters_character_id_calendar_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'eventDate' => '\DateTime',
        'eventId' => 'int',
        'eventResponse' => 'string',
        'importance' => 'int',
        'title' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'eventDate' => 'event_date',
        'eventId' => 'event_id',
        'eventResponse' => 'event_response',
        'importance' => 'importance',
        'title' => 'title'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'eventDate' => 'setEventDate',
        'eventId' => 'setEventId',
        'eventResponse' => 'setEventResponse',
        'importance' => 'setImportance',
        'title' => 'setTitle'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'eventDate' => 'getEventDate',
        'eventId' => 'getEventId',
        'eventResponse' => 'getEventResponse',
        'importance' => 'getImportance',
        'title' => 'getTitle'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const EVENT_RESPONSE_DECLINED = 'declined';
    const EVENT_RESPONSE_NOT_RESPONDED = 'not_responded';
    const EVENT_RESPONSE_ACCEPTED = 'accepted';
    const EVENT_RESPONSE_TENTATIVE = 'tentative';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEventResponseAllowableValues()
    {
        return [
            self::EVENT_RESPONSE_DECLINED,
            self::EVENT_RESPONSE_NOT_RESPONDED,
            self::EVENT_RESPONSE_ACCEPTED,
            self::EVENT_RESPONSE_TENTATIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['eventDate'] = isset($data['eventDate']) ? $data['eventDate'] : null;
        $this->container['eventId'] = isset($data['eventId']) ? $data['eventId'] : null;
        $this->container['eventResponse'] = isset($data['eventResponse']) ? $data['eventResponse'] : null;
        $this->container['importance'] = isset($data['importance']) ? $data['importance'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["declined", "not_responded", "accepted", "tentative"];
        if (!in_array($this->container['eventResponse'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'eventResponse', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["declined", "not_responded", "accepted", "tentative"];
        if (!in_array($this->container['eventResponse'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets eventDate
     * @return \DateTime
     */
    public function getEventDate()
    {
        return $this->container['eventDate'];
    }

    /**
     * Sets eventDate
     * @param \DateTime $eventDate event_date string
     * @return $this
     */
    public function setEventDate($eventDate)
    {
        $this->container['eventDate'] = $eventDate;

        return $this;
    }

    /**
     * Gets eventId
     * @return int
     */
    public function getEventId()
    {
        return $this->container['eventId'];
    }

    /**
     * Sets eventId
     * @param int $eventId event_id integer
     * @return $this
     */
    public function setEventId($eventId)
    {
        $this->container['eventId'] = $eventId;

        return $this;
    }

    /**
     * Gets eventResponse
     * @return string
     */
    public function getEventResponse()
    {
        return $this->container['eventResponse'];
    }

    /**
     * Sets eventResponse
     * @param string $eventResponse event_response string
     * @return $this
     */
    public function setEventResponse($eventResponse)
    {
        $allowed_values = array('declined', 'not_responded', 'accepted', 'tentative');
        if (!is_null($eventResponse) && (!in_array($eventResponse, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'eventResponse', must be one of 'declined', 'not_responded', 'accepted', 'tentative'");
        }
        $this->container['eventResponse'] = $eventResponse;

        return $this;
    }

    /**
     * Gets importance
     * @return int
     */
    public function getImportance()
    {
        return $this->container['importance'];
    }

    /**
     * Sets importance
     * @param int $importance importance integer
     * @return $this
     */
    public function setImportance($importance)
    {
        $this->container['importance'] = $importance;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title title string
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\nullx27\ESI\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\nullx27\ESI\ObjectSerializer::sanitizeForSerialization($this));
    }
}


