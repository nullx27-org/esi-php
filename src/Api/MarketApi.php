<?php
/**
 * MarketApi
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.2.dev16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\Api;

use \nullx27\ESI\ApiClient;
use \nullx27\ESI\ApiException;
use \nullx27\ESI\Configuration;
use \nullx27\ESI\ObjectSerializer;

/**
 * MarketApi Class Doc Comment
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MarketApi
{
    /**
     * API Client
     *
     * @var \nullx27\ESI\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \nullx27\ESI\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\nullx27\ESI\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://esi.tech.ccp.is/latest');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \nullx27\ESI\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \nullx27\ESI\ApiClient $apiClient set the API client
     *
     * @return MarketApi
     */
    public function setApiClient(\nullx27\ESI\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getMarketsGroups
     *
     * Get item groups
     *
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return int[]
     */
    public function getMarketsGroups($datasource = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getMarketsGroupsWithHttpInfo($datasource, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getMarketsGroupsWithHttpInfo
     *
     * Get item groups
     *
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return array of int[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMarketsGroupsWithHttpInfo($datasource = null, $userAgent = null, $xUserAgent = null)
    {
        // parse inputs
        $resourcePath = "/markets/groups/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = $this->apiClient->getSerializer()->toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = $this->apiClient->getSerializer()->toHeaderValue($xUserAgent);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int[]',
                '/markets/groups/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsGroupsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMarketsGroupsMarketGroupId
     *
     * Get item group information
     *
     * @param int $marketGroupId An Eve item group ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return \nullx27\ESI\Models\GetMarketsGroupsMarketGroupIdOk
     */
    public function getMarketsGroupsMarketGroupId($marketGroupId, $datasource = null, $language = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getMarketsGroupsMarketGroupIdWithHttpInfo($marketGroupId, $datasource, $language, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getMarketsGroupsMarketGroupIdWithHttpInfo
     *
     * Get item group information
     *
     * @param int $marketGroupId An Eve item group ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return array of \nullx27\ESI\Models\GetMarketsGroupsMarketGroupIdOk, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMarketsGroupsMarketGroupIdWithHttpInfo($marketGroupId, $datasource = null, $language = null, $userAgent = null, $xUserAgent = null)
    {
        // verify the required parameter 'marketGroupId' is set
        if ($marketGroupId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $marketGroupId when calling getMarketsGroupsMarketGroupId');
        }
        // parse inputs
        $resourcePath = "/markets/groups/{market_group_id}/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = $this->apiClient->getSerializer()->toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = $this->apiClient->getSerializer()->toHeaderValue($xUserAgent);
        }
        // path params
        if ($marketGroupId !== null) {
            $resourcePath = str_replace(
                "{" . "market_group_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($marketGroupId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetMarketsGroupsMarketGroupIdOk',
                '/markets/groups/{market_group_id}/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetMarketsGroupsMarketGroupIdOk', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsGroupsMarketGroupIdOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsGroupsMarketGroupIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsGroupsMarketGroupIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMarketsPrices
     *
     * List market prices
     *
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return \nullx27\ESI\Models\GetMarketsPrices200Ok[]
     */
    public function getMarketsPrices($datasource = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getMarketsPricesWithHttpInfo($datasource, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getMarketsPricesWithHttpInfo
     *
     * List market prices
     *
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return array of \nullx27\ESI\Models\GetMarketsPrices200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMarketsPricesWithHttpInfo($datasource = null, $userAgent = null, $xUserAgent = null)
    {
        // parse inputs
        $resourcePath = "/markets/prices/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = $this->apiClient->getSerializer()->toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = $this->apiClient->getSerializer()->toHeaderValue($xUserAgent);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetMarketsPrices200Ok[]',
                '/markets/prices/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetMarketsPrices200Ok[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsPrices200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsPricesInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMarketsRegionIdHistory
     *
     * List historical market statistics in a region
     *
     * @param int $regionId Return statistics in this region (required)
     * @param int $typeId Return statistics for this type (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return \nullx27\ESI\Models\GetMarketsRegionIdHistory200Ok[]
     */
    public function getMarketsRegionIdHistory($regionId, $typeId, $datasource = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getMarketsRegionIdHistoryWithHttpInfo($regionId, $typeId, $datasource, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getMarketsRegionIdHistoryWithHttpInfo
     *
     * List historical market statistics in a region
     *
     * @param int $regionId Return statistics in this region (required)
     * @param int $typeId Return statistics for this type (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return array of \nullx27\ESI\Models\GetMarketsRegionIdHistory200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMarketsRegionIdHistoryWithHttpInfo($regionId, $typeId, $datasource = null, $userAgent = null, $xUserAgent = null)
    {
        // verify the required parameter 'regionId' is set
        if ($regionId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $regionId when calling getMarketsRegionIdHistory');
        }
        // verify the required parameter 'typeId' is set
        if ($typeId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $typeId when calling getMarketsRegionIdHistory');
        }
        // parse inputs
        $resourcePath = "/markets/{region_id}/history/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // query params
        if ($typeId !== null) {
            $queryParams['type_id'] = $this->apiClient->getSerializer()->toQueryValue($typeId);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = $this->apiClient->getSerializer()->toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = $this->apiClient->getSerializer()->toHeaderValue($xUserAgent);
        }
        // path params
        if ($regionId !== null) {
            $resourcePath = str_replace(
                "{" . "region_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($regionId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetMarketsRegionIdHistory200Ok[]',
                '/markets/{region_id}/history/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetMarketsRegionIdHistory200Ok[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsRegionIdHistory200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsRegionIdHistoryUnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsRegionIdHistoryInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMarketsRegionIdOrders
     *
     * List orders in a region
     *
     * @param string $orderType Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders. (required)
     * @param int $regionId Return orders in this region (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param int $page Which page to query, only used for querying without type_id. Starting at 1 (optional, default to 1)
     * @param int $typeId Return orders only for this type (optional)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return \nullx27\ESI\Models\GetMarketsRegionIdOrders200Ok[]
     */
    public function getMarketsRegionIdOrders($orderType, $regionId, $datasource = null, $page = null, $typeId = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getMarketsRegionIdOrdersWithHttpInfo($orderType, $regionId, $datasource, $page, $typeId, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getMarketsRegionIdOrdersWithHttpInfo
     *
     * List orders in a region
     *
     * @param string $orderType Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders. (required)
     * @param int $regionId Return orders in this region (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param int $page Which page to query, only used for querying without type_id. Starting at 1 (optional, default to 1)
     * @param int $typeId Return orders only for this type (optional)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return array of \nullx27\ESI\Models\GetMarketsRegionIdOrders200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMarketsRegionIdOrdersWithHttpInfo($orderType, $regionId, $datasource = null, $page = null, $typeId = null, $userAgent = null, $xUserAgent = null)
    {
        // verify the required parameter 'orderType' is set
        if ($orderType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $orderType when calling getMarketsRegionIdOrders');
        }
        // verify the required parameter 'regionId' is set
        if ($regionId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $regionId when calling getMarketsRegionIdOrders');
        }
        // parse inputs
        $resourcePath = "/markets/{region_id}/orders/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // query params
        if ($orderType !== null) {
            $queryParams['order_type'] = $this->apiClient->getSerializer()->toQueryValue($orderType);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($typeId !== null) {
            $queryParams['type_id'] = $this->apiClient->getSerializer()->toQueryValue($typeId);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = $this->apiClient->getSerializer()->toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = $this->apiClient->getSerializer()->toHeaderValue($xUserAgent);
        }
        // path params
        if ($regionId !== null) {
            $resourcePath = str_replace(
                "{" . "region_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($regionId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetMarketsRegionIdOrders200Ok[]',
                '/markets/{region_id}/orders/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetMarketsRegionIdOrders200Ok[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsRegionIdOrders200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsRegionIdOrdersUnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsRegionIdOrdersInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMarketsStructuresStructureId
     *
     * List orders in a structure
     *
     * @param int $structureId Return orders in this structure (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param int $page Which page to query, starting at 1 (optional, default to 1)
     * @param string $token Access token to use, if preferred over a header (optional)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return \nullx27\ESI\Models\GetMarketsStructuresStructureId200Ok[]
     */
    public function getMarketsStructuresStructureId($structureId, $datasource = null, $page = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getMarketsStructuresStructureIdWithHttpInfo($structureId, $datasource, $page, $token, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getMarketsStructuresStructureIdWithHttpInfo
     *
     * List orders in a structure
     *
     * @param int $structureId Return orders in this structure (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @param int $page Which page to query, starting at 1 (optional, default to 1)
     * @param string $token Access token to use, if preferred over a header (optional)
     * @param string $userAgent Client identifier, takes precedence over headers (optional)
     * @param string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @return array of \nullx27\ESI\Models\GetMarketsStructuresStructureId200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMarketsStructuresStructureIdWithHttpInfo($structureId, $datasource = null, $page = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        // verify the required parameter 'structureId' is set
        if ($structureId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $structureId when calling getMarketsStructuresStructureId');
        }
        // parse inputs
        $resourcePath = "/markets/structures/{structure_id}/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = $this->apiClient->getSerializer()->toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = $this->apiClient->getSerializer()->toHeaderValue($xUserAgent);
        }
        // path params
        if ($structureId !== null) {
            $resourcePath = str_replace(
                "{" . "structure_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($structureId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetMarketsStructuresStructureId200Ok[]',
                '/markets/structures/{structure_id}/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetMarketsStructuresStructureId200Ok[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsStructuresStructureId200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsStructuresStructureIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetMarketsStructuresStructureIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
