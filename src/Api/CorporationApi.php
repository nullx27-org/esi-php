<?php
/**
 * CorporationApi
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.10.dev17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\Api;

use \nullx27\ESI\Configuration;
use \nullx27\ESI\ApiClient;
use \nullx27\ESI\ApiException;
use \nullx27\ESI\ObjectSerializer;

/**
 * CorporationApi Class Doc Comment
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CorporationApi
{

    /**
     * API Client
     *
     * @var \nullx27\ESI\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \nullx27\ESI\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\nullx27\ESI\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://esi.tech.ccp.is/latest');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \nullx27\ESI\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \nullx27\ESI\ApiClient $apiClient set the API client
     *
     * @return CorporationApi
     */
    public function setApiClient(\nullx27\ESI\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getCorporationsCorporationId
     *
     * Get corporation information
     *
     * @param int $corporationId An Eve corporation ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetCorporationsCorporationIdOk
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsCorporationId($corporationId, $datasource = null)
    {
        list($response) = $this->getCorporationsCorporationIdWithHttpInfo($corporationId, $datasource);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdWithHttpInfo
     *
     * Get corporation information
     *
     * @param int $corporationId An Eve corporation ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetCorporationsCorporationIdOk, HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsCorporationIdWithHttpInfo($corporationId, $datasource = null)
    {
        // verify the required parameter 'corporationId' is set
        if ($corporationId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $corporationId when calling getCorporationsCorporationId');
        }
        // parse inputs
        $resourcePath = "/corporations/{corporation_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($corporationId !== null) {
            $resourcePath = str_replace(
                "{" . "corporation_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($corporationId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetCorporationsCorporationIdOk',
                '/corporations/{corporation_id}/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetCorporationsCorporationIdOk', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdAlliancehistory
     *
     * Get alliance history
     *
     * @param int $corporationId An EVE corporation ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetCorporationsCorporationIdAlliancehistory200Ok[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsCorporationIdAlliancehistory($corporationId, $datasource = null)
    {
        list($response) = $this->getCorporationsCorporationIdAlliancehistoryWithHttpInfo($corporationId, $datasource);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdAlliancehistoryWithHttpInfo
     *
     * Get alliance history
     *
     * @param int $corporationId An EVE corporation ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetCorporationsCorporationIdAlliancehistory200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsCorporationIdAlliancehistoryWithHttpInfo($corporationId, $datasource = null)
    {
        // verify the required parameter 'corporationId' is set
        if ($corporationId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $corporationId when calling getCorporationsCorporationIdAlliancehistory');
        }
        // parse inputs
        $resourcePath = "/corporations/{corporation_id}/alliancehistory/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($corporationId !== null) {
            $resourcePath = str_replace(
                "{" . "corporation_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($corporationId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetCorporationsCorporationIdAlliancehistory200Ok[]',
                '/corporations/{corporation_id}/alliancehistory/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetCorporationsCorporationIdAlliancehistory200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdAlliancehistory200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdAlliancehistoryInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdIcons
     *
     * Get corporation icon
     *
     * @param int $corporationId An EVE corporation ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetCorporationsCorporationIdIconsOk
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsCorporationIdIcons($corporationId, $datasource = null)
    {
        list($response) = $this->getCorporationsCorporationIdIconsWithHttpInfo($corporationId, $datasource);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdIconsWithHttpInfo
     *
     * Get corporation icon
     *
     * @param int $corporationId An EVE corporation ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetCorporationsCorporationIdIconsOk, HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsCorporationIdIconsWithHttpInfo($corporationId, $datasource = null)
    {
        // verify the required parameter 'corporationId' is set
        if ($corporationId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $corporationId when calling getCorporationsCorporationIdIcons');
        }
        // parse inputs
        $resourcePath = "/corporations/{corporation_id}/icons/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($corporationId !== null) {
            $resourcePath = str_replace(
                "{" . "corporation_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($corporationId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetCorporationsCorporationIdIconsOk',
                '/corporations/{corporation_id}/icons/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetCorporationsCorporationIdIconsOk', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdIconsOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdIconsNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdIconsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdMembers
     *
     * Get corporation members
     *
     * @param int $corporationId A corporation ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetCorporationsCorporationIdMembers200Ok[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsCorporationIdMembers($corporationId, $datasource = null)
    {
        list($response) = $this->getCorporationsCorporationIdMembersWithHttpInfo($corporationId, $datasource);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdMembersWithHttpInfo
     *
     * Get corporation members
     *
     * @param int $corporationId A corporation ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetCorporationsCorporationIdMembers200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsCorporationIdMembersWithHttpInfo($corporationId, $datasource = null)
    {
        // verify the required parameter 'corporationId' is set
        if ($corporationId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $corporationId when calling getCorporationsCorporationIdMembers');
        }
        // parse inputs
        $resourcePath = "/corporations/{corporation_id}/members/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($corporationId !== null) {
            $resourcePath = str_replace(
                "{" . "corporation_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($corporationId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetCorporationsCorporationIdMembers200Ok[]',
                '/corporations/{corporation_id}/members/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetCorporationsCorporationIdMembers200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdMembers200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdMembersForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdMembersInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdRoles
     *
     * Get corporation member roles
     *
     * @param int $corporationId A corporation ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetCorporationsCorporationIdRoles200Ok[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsCorporationIdRoles($corporationId, $datasource = null)
    {
        list($response) = $this->getCorporationsCorporationIdRolesWithHttpInfo($corporationId, $datasource);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdRolesWithHttpInfo
     *
     * Get corporation member roles
     *
     * @param int $corporationId A corporation ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetCorporationsCorporationIdRoles200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsCorporationIdRolesWithHttpInfo($corporationId, $datasource = null)
    {
        // verify the required parameter 'corporationId' is set
        if ($corporationId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $corporationId when calling getCorporationsCorporationIdRoles');
        }
        // parse inputs
        $resourcePath = "/corporations/{corporation_id}/roles/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($corporationId !== null) {
            $resourcePath = str_replace(
                "{" . "corporation_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($corporationId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetCorporationsCorporationIdRoles200Ok[]',
                '/corporations/{corporation_id}/roles/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetCorporationsCorporationIdRoles200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdRoles200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdRolesForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsCorporationIdRolesInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCorporationsNames
     *
     * Get corporation names
     *
     * @param int[] $corporationIds A comma separated list of corporation IDs (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetCorporationsNames200Ok[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsNames($corporationIds, $datasource = null)
    {
        list($response) = $this->getCorporationsNamesWithHttpInfo($corporationIds, $datasource);
        return $response;
    }

    /**
     * Operation getCorporationsNamesWithHttpInfo
     *
     * Get corporation names
     *
     * @param int[] $corporationIds A comma separated list of corporation IDs (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetCorporationsNames200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getCorporationsNamesWithHttpInfo($corporationIds, $datasource = null)
    {
        // verify the required parameter 'corporationIds' is set
        if ($corporationIds === null) {
            throw new \InvalidArgumentException('Missing the required parameter $corporationIds when calling getCorporationsNames');
        }

        // parse inputs
        $resourcePath = "/corporations/names/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if (is_array($corporationIds)) {
            $corporationIds = $this->apiClient->getSerializer()->serializeCollection($corporationIds, 'csv', true);
        }
        if ($corporationIds !== null) {
            $queryParams['corporation_ids'] = $this->apiClient->getSerializer()->toQueryValue($corporationIds);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetCorporationsNames200Ok[]',
                '/corporations/names/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetCorporationsNames200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsNames200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetCorporationsNamesInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
