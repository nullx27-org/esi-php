<?php
/**
 * UniverseApi
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.10.dev17
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\Api;

use \nullx27\ESI\Configuration;
use \nullx27\ESI\ApiClient;
use \nullx27\ESI\ApiException;
use \nullx27\ESI\ObjectSerializer;

/**
 * UniverseApi Class Doc Comment
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UniverseApi
{

    /**
     * API Client
     *
     * @var \nullx27\ESI\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \nullx27\ESI\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\nullx27\ESI\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://esi.tech.ccp.is/latest');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \nullx27\ESI\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \nullx27\ESI\ApiClient $apiClient set the API client
     *
     * @return UniverseApi
     */
    public function setApiClient(\nullx27\ESI\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getUniverseBloodlines
     *
     * Get bloodlines
     *
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetUniverseBloodlines200Ok[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseBloodlines($language = null, $datasource = null)
    {
        list($response) = $this->getUniverseBloodlinesWithHttpInfo($language, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseBloodlinesWithHttpInfo
     *
     * Get bloodlines
     *
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetUniverseBloodlines200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseBloodlinesWithHttpInfo($language = null, $datasource = null)
    {
        // parse inputs
        $resourcePath = "/universe/bloodlines/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetUniverseBloodlines200Ok[]',
                '/universe/bloodlines/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetUniverseBloodlines200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseBloodlines200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseBloodlinesInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseCategories
     *
     * Get item categories
     *
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return int[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseCategories($datasource = null)
    {
        list($response) = $this->getUniverseCategoriesWithHttpInfo($datasource);
        return $response;
    }

    /**
     * Operation getUniverseCategoriesWithHttpInfo
     *
     * Get item categories
     *
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of int[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseCategoriesWithHttpInfo($datasource = null)
    {
        // parse inputs
        $resourcePath = "/universe/categories/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int[]',
                '/universe/categories/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'int[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseCategoriesInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseCategoriesCategoryId
     *
     * Get item category information
     *
     * @param int $categoryId An Eve item category ID (required)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetUniverseCategoriesCategoryIdOk
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseCategoriesCategoryId($categoryId, $language = null, $datasource = null)
    {
        list($response) = $this->getUniverseCategoriesCategoryIdWithHttpInfo($categoryId, $language, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseCategoriesCategoryIdWithHttpInfo
     *
     * Get item category information
     *
     * @param int $categoryId An Eve item category ID (required)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetUniverseCategoriesCategoryIdOk, HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseCategoriesCategoryIdWithHttpInfo($categoryId, $language = null, $datasource = null)
    {
        // verify the required parameter 'categoryId' is set
        if ($categoryId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $categoryId when calling getUniverseCategoriesCategoryId');
        }
        // parse inputs
        $resourcePath = "/universe/categories/{category_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($categoryId !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($categoryId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetUniverseCategoriesCategoryIdOk',
                '/universe/categories/{category_id}/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetUniverseCategoriesCategoryIdOk', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseCategoriesCategoryIdOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseCategoriesCategoryIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseCategoriesCategoryIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseFactions
     *
     * Get factions
     *
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetUniverseFactions200Ok[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseFactions($language = null, $datasource = null)
    {
        list($response) = $this->getUniverseFactionsWithHttpInfo($language, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseFactionsWithHttpInfo
     *
     * Get factions
     *
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetUniverseFactions200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseFactionsWithHttpInfo($language = null, $datasource = null)
    {
        // parse inputs
        $resourcePath = "/universe/factions/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetUniverseFactions200Ok[]',
                '/universe/factions/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetUniverseFactions200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseFactions200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseFactionsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseGroups
     *
     * Get item groups
     *
     * @param int $page Which page to query (optional)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return int[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseGroups($page = null, $datasource = null)
    {
        list($response) = $this->getUniverseGroupsWithHttpInfo($page, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseGroupsWithHttpInfo
     *
     * Get item groups
     *
     * @param int $page Which page to query (optional)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of int[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseGroupsWithHttpInfo($page = null, $datasource = null)
    {
        if (!is_null($page) && ($page < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling UniverseApi.getUniverseGroups, must be bigger than or equal to 1.0.');
        }

        // parse inputs
        $resourcePath = "/universe/groups/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int[]',
                '/universe/groups/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'int[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseGroupsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseGroupsGroupId
     *
     * Get item group information
     *
     * @param int $groupId An Eve item group ID (required)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetUniverseGroupsGroupIdOk
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseGroupsGroupId($groupId, $language = null, $datasource = null)
    {
        list($response) = $this->getUniverseGroupsGroupIdWithHttpInfo($groupId, $language, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseGroupsGroupIdWithHttpInfo
     *
     * Get item group information
     *
     * @param int $groupId An Eve item group ID (required)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetUniverseGroupsGroupIdOk, HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseGroupsGroupIdWithHttpInfo($groupId, $language = null, $datasource = null)
    {
        // verify the required parameter 'groupId' is set
        if ($groupId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupId when calling getUniverseGroupsGroupId');
        }
        // parse inputs
        $resourcePath = "/universe/groups/{group_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($groupId !== null) {
            $resourcePath = str_replace(
                "{" . "group_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($groupId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetUniverseGroupsGroupIdOk',
                '/universe/groups/{group_id}/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetUniverseGroupsGroupIdOk', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseGroupsGroupIdOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseGroupsGroupIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseGroupsGroupIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseRaces
     *
     * Get character races
     *
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetUniverseRaces200Ok[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseRaces($language = null, $datasource = null)
    {
        list($response) = $this->getUniverseRacesWithHttpInfo($language, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseRacesWithHttpInfo
     *
     * Get character races
     *
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetUniverseRaces200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseRacesWithHttpInfo($language = null, $datasource = null)
    {
        // parse inputs
        $resourcePath = "/universe/races/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetUniverseRaces200Ok[]',
                '/universe/races/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetUniverseRaces200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseRaces200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseRacesInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseStationsStationId
     *
     * Get station information
     *
     * @param int $stationId An Eve station ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetUniverseStationsStationIdOk
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseStationsStationId($stationId, $datasource = null)
    {
        list($response) = $this->getUniverseStationsStationIdWithHttpInfo($stationId, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseStationsStationIdWithHttpInfo
     *
     * Get station information
     *
     * @param int $stationId An Eve station ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetUniverseStationsStationIdOk, HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseStationsStationIdWithHttpInfo($stationId, $datasource = null)
    {
        // verify the required parameter 'stationId' is set
        if ($stationId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $stationId when calling getUniverseStationsStationId');
        }
        // parse inputs
        $resourcePath = "/universe/stations/{station_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($stationId !== null) {
            $resourcePath = str_replace(
                "{" . "station_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($stationId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetUniverseStationsStationIdOk',
                '/universe/stations/{station_id}/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetUniverseStationsStationIdOk', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseStationsStationIdOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseStationsStationIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseStructures
     *
     * List all public structures
     *
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return int[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseStructures($datasource = null)
    {
        list($response) = $this->getUniverseStructuresWithHttpInfo($datasource);
        return $response;
    }

    /**
     * Operation getUniverseStructuresWithHttpInfo
     *
     * List all public structures
     *
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of int[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseStructuresWithHttpInfo($datasource = null)
    {
        // parse inputs
        $resourcePath = "/universe/structures/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int[]',
                '/universe/structures/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'int[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseStructuresInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseStructuresStructureId
     *
     * Get structure information
     *
     * @param int $structureId An Eve structure ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetUniverseStructuresStructureIdOk
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseStructuresStructureId($structureId, $datasource = null)
    {
        list($response) = $this->getUniverseStructuresStructureIdWithHttpInfo($structureId, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseStructuresStructureIdWithHttpInfo
     *
     * Get structure information
     *
     * @param int $structureId An Eve structure ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetUniverseStructuresStructureIdOk, HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseStructuresStructureIdWithHttpInfo($structureId, $datasource = null)
    {
        // verify the required parameter 'structureId' is set
        if ($structureId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $structureId when calling getUniverseStructuresStructureId');
        }
        // parse inputs
        $resourcePath = "/universe/structures/{structure_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($structureId !== null) {
            $resourcePath = str_replace(
                "{" . "structure_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($structureId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetUniverseStructuresStructureIdOk',
                '/universe/structures/{structure_id}/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetUniverseStructuresStructureIdOk', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseStructuresStructureIdOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseStructuresStructureIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseStructuresStructureIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseStructuresStructureIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseSystemsSystemId
     *
     * Get solar system information
     *
     * @param int $systemId An Eve solar system ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetUniverseSystemsSystemIdOk
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseSystemsSystemId($systemId, $datasource = null)
    {
        list($response) = $this->getUniverseSystemsSystemIdWithHttpInfo($systemId, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseSystemsSystemIdWithHttpInfo
     *
     * Get solar system information
     *
     * @param int $systemId An Eve solar system ID (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetUniverseSystemsSystemIdOk, HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseSystemsSystemIdWithHttpInfo($systemId, $datasource = null)
    {
        // verify the required parameter 'systemId' is set
        if ($systemId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $systemId when calling getUniverseSystemsSystemId');
        }
        // parse inputs
        $resourcePath = "/universe/systems/{system_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($systemId !== null) {
            $resourcePath = str_replace(
                "{" . "system_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($systemId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetUniverseSystemsSystemIdOk',
                '/universe/systems/{system_id}/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetUniverseSystemsSystemIdOk', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseSystemsSystemIdOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseSystemsSystemIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseSystemsSystemIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseTypes
     *
     * Get types
     *
     * @param int $page Which page to query (optional)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return int[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseTypes($page = null, $datasource = null)
    {
        list($response) = $this->getUniverseTypesWithHttpInfo($page, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseTypesWithHttpInfo
     *
     * Get types
     *
     * @param int $page Which page to query (optional)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of int[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseTypesWithHttpInfo($page = null, $datasource = null)
    {
        if (!is_null($page) && ($page < 1.0)) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling UniverseApi.getUniverseTypes, must be bigger than or equal to 1.0.');
        }

        // parse inputs
        $resourcePath = "/universe/types/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int[]',
                '/universe/types/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'int[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseTypesInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUniverseTypesTypeId
     *
     * Get type information
     *
     * @param int $typeId An Eve item type ID (required)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\GetUniverseTypesTypeIdOk
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseTypesTypeId($typeId, $language = null, $datasource = null)
    {
        list($response) = $this->getUniverseTypesTypeIdWithHttpInfo($typeId, $language, $datasource);
        return $response;
    }

    /**
     * Operation getUniverseTypesTypeIdWithHttpInfo
     *
     * Get type information
     *
     * @param int $typeId An Eve item type ID (required)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\GetUniverseTypesTypeIdOk, HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function getUniverseTypesTypeIdWithHttpInfo($typeId, $language = null, $datasource = null)
    {
        // verify the required parameter 'typeId' is set
        if ($typeId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $typeId when calling getUniverseTypesTypeId');
        }
        // parse inputs
        $resourcePath = "/universe/types/{type_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($typeId !== null) {
            $resourcePath = str_replace(
                "{" . "type_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($typeId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\GetUniverseTypesTypeIdOk',
                '/universe/types/{type_id}/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\GetUniverseTypesTypeIdOk', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseTypesTypeIdOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseTypesTypeIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\GetUniverseTypesTypeIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postUniverseNames
     *
     * Get names and categories for a set of ID's
     *
     * @param int[] $ids The ids to resolve (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \nullx27\ESI\Models\PostUniverseNames200Ok[]
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function postUniverseNames($ids, $datasource = null)
    {
        list($response) = $this->postUniverseNamesWithHttpInfo($ids, $datasource);
        return $response;
    }

    /**
     * Operation postUniverseNamesWithHttpInfo
     *
     * Get names and categories for a set of ID's
     *
     * @param int[] $ids The ids to resolve (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \nullx27\ESI\Models\PostUniverseNames200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \nullx27\ESI\ApiException on non-2xx response
     */
    public function postUniverseNamesWithHttpInfo($ids, $datasource = null)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling postUniverseNames');
        }
        // parse inputs
        $resourcePath = "/universe/names/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($ids)) {
            $_tempBody = $ids;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\nullx27\ESI\Models\PostUniverseNames200Ok[]',
                '/universe/names/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\nullx27\ESI\Models\PostUniverseNames200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\PostUniverseNames200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\PostUniverseNamesNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\nullx27\ESI\Models\PostUniverseNamesInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
