<?php
/**
 * WalletApi
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use nullx27\ESI\ApiException;
use nullx27\ESI\Configuration;
use nullx27\ESI\HeaderSelector;
use nullx27\ESI\ObjectSerializer;

/**
 * WalletApi Class Doc Comment
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WalletApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCharactersCharacterIdWallet
     *
     * Get a character's wallet balance
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return double
     */
    public function getCharactersCharacterIdWallet($characterId, $datasource = 'tranquility', $token = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getCharactersCharacterIdWalletWithHttpInfo($characterId, $datasource, $token, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdWalletWithHttpInfo
     *
     * Get a character's wallet balance
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of double, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdWalletWithHttpInfo($characterId, $datasource = 'tranquility', $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = 'double';
        $request = $this->getCharactersCharacterIdWalletRequest($characterId, $datasource, $token, $userAgent, $xUserAgent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'double',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdWalletAsync
     *
     * Get a character's wallet balance
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdWalletAsync($characterId, $datasource = 'tranquility', $token = null, $userAgent = null, $xUserAgent = null)
    {
        return $this->getCharactersCharacterIdWalletAsyncWithHttpInfo($characterId, $datasource, $token, $userAgent, $xUserAgent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdWalletAsyncWithHttpInfo
     *
     * Get a character's wallet balance
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdWalletAsyncWithHttpInfo($characterId, $datasource = 'tranquility', $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = 'double';
        $request = $this->getCharactersCharacterIdWalletRequest($characterId, $datasource, $token, $userAgent, $xUserAgent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdWallet'
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdWalletRequest($characterId, $datasource = 'tranquility', $token = null, $userAgent = null, $xUserAgent = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $characterId when calling getCharactersCharacterIdWallet'
            );
        }
        if ($characterId < 1) {
            throw new \InvalidArgumentException('invalid value for "$characterId" when calling WalletApi.getCharactersCharacterIdWallet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/characters/{character_id}/wallet/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = ObjectSerializer::toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = ObjectSerializer::toHeaderValue($xUserAgent);
        }

        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($characterId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdWalletJournal
     *
     * Get character wallet journal
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdWalletJournal200Ok[]
     */
    public function getCharactersCharacterIdWalletJournal($characterId, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getCharactersCharacterIdWalletJournalWithHttpInfo($characterId, $datasource, $fromId, $token, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdWalletJournalWithHttpInfo
     *
     * Get character wallet journal
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdWalletJournal200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdWalletJournalWithHttpInfo($characterId, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = '\nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdWalletJournal200Ok[]';
        $request = $this->getCharactersCharacterIdWalletJournalRequest($characterId, $datasource, $fromId, $token, $userAgent, $xUserAgent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdWalletJournal200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdWalletJournalAsync
     *
     * Get character wallet journal
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdWalletJournalAsync($characterId, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        return $this->getCharactersCharacterIdWalletJournalAsyncWithHttpInfo($characterId, $datasource, $fromId, $token, $userAgent, $xUserAgent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdWalletJournalAsyncWithHttpInfo
     *
     * Get character wallet journal
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdWalletJournalAsyncWithHttpInfo($characterId, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = '\nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdWalletJournal200Ok[]';
        $request = $this->getCharactersCharacterIdWalletJournalRequest($characterId, $datasource, $fromId, $token, $userAgent, $xUserAgent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdWalletJournal'
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdWalletJournalRequest($characterId, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $characterId when calling getCharactersCharacterIdWalletJournal'
            );
        }
        if ($characterId < 1) {
            throw new \InvalidArgumentException('invalid value for "$characterId" when calling WalletApi.getCharactersCharacterIdWalletJournal, must be bigger than or equal to 1.');
        }


        $resourcePath = '/characters/{character_id}/wallet/journal/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($fromId !== null) {
            $queryParams['from_id'] = ObjectSerializer::toQueryValue($fromId);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = ObjectSerializer::toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = ObjectSerializer::toHeaderValue($xUserAgent);
        }

        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($characterId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdWalletTransactions
     *
     * Get wallet transactions
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show transactions happened before the one referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdWalletTransactions200Ok[]
     */
    public function getCharactersCharacterIdWalletTransactions($characterId, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getCharactersCharacterIdWalletTransactionsWithHttpInfo($characterId, $datasource, $fromId, $token, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdWalletTransactionsWithHttpInfo
     *
     * Get wallet transactions
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show transactions happened before the one referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdWalletTransactions200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdWalletTransactionsWithHttpInfo($characterId, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = '\nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdWalletTransactions200Ok[]';
        $request = $this->getCharactersCharacterIdWalletTransactionsRequest($characterId, $datasource, $fromId, $token, $userAgent, $xUserAgent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdWalletTransactions200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdWalletTransactionsAsync
     *
     * Get wallet transactions
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show transactions happened before the one referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdWalletTransactionsAsync($characterId, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        return $this->getCharactersCharacterIdWalletTransactionsAsyncWithHttpInfo($characterId, $datasource, $fromId, $token, $userAgent, $xUserAgent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdWalletTransactionsAsyncWithHttpInfo
     *
     * Get wallet transactions
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show transactions happened before the one referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdWalletTransactionsAsyncWithHttpInfo($characterId, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = '\nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdWalletTransactions200Ok[]';
        $request = $this->getCharactersCharacterIdWalletTransactionsRequest($characterId, $datasource, $fromId, $token, $userAgent, $xUserAgent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdWalletTransactions'
     *
     * @param  int $characterId An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show transactions happened before the one referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdWalletTransactionsRequest($characterId, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        // verify the required parameter 'characterId' is set
        if ($characterId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $characterId when calling getCharactersCharacterIdWalletTransactions'
            );
        }
        if ($characterId < 1) {
            throw new \InvalidArgumentException('invalid value for "$characterId" when calling WalletApi.getCharactersCharacterIdWalletTransactions, must be bigger than or equal to 1.');
        }


        $resourcePath = '/characters/{character_id}/wallet/transactions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($fromId !== null) {
            $queryParams['from_id'] = ObjectSerializer::toQueryValue($fromId);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = ObjectSerializer::toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = ObjectSerializer::toHeaderValue($xUserAgent);
        }

        // path params
        if ($characterId !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($characterId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdWallets
     *
     * Returns a corporation's wallet balance
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWallets200Ok[]
     */
    public function getCorporationsCorporationIdWallets($corporationId, $datasource = 'tranquility', $token = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getCorporationsCorporationIdWalletsWithHttpInfo($corporationId, $datasource, $token, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdWalletsWithHttpInfo
     *
     * Returns a corporation's wallet balance
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWallets200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdWalletsWithHttpInfo($corporationId, $datasource = 'tranquility', $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = '\nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWallets200Ok[]';
        $request = $this->getCorporationsCorporationIdWalletsRequest($corporationId, $datasource, $token, $userAgent, $xUserAgent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWallets200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdWalletsAsync
     *
     * Returns a corporation's wallet balance
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdWalletsAsync($corporationId, $datasource = 'tranquility', $token = null, $userAgent = null, $xUserAgent = null)
    {
        return $this->getCorporationsCorporationIdWalletsAsyncWithHttpInfo($corporationId, $datasource, $token, $userAgent, $xUserAgent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdWalletsAsyncWithHttpInfo
     *
     * Returns a corporation's wallet balance
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdWalletsAsyncWithHttpInfo($corporationId, $datasource = 'tranquility', $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = '\nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWallets200Ok[]';
        $request = $this->getCorporationsCorporationIdWalletsRequest($corporationId, $datasource, $token, $userAgent, $xUserAgent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdWallets'
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCorporationsCorporationIdWalletsRequest($corporationId, $datasource = 'tranquility', $token = null, $userAgent = null, $xUserAgent = null)
    {
        // verify the required parameter 'corporationId' is set
        if ($corporationId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporationId when calling getCorporationsCorporationIdWallets'
            );
        }
        if ($corporationId < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporationId" when calling WalletApi.getCorporationsCorporationIdWallets, must be bigger than or equal to 1.');
        }


        $resourcePath = '/corporations/{corporation_id}/wallets/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = ObjectSerializer::toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = ObjectSerializer::toHeaderValue($xUserAgent);
        }

        // path params
        if ($corporationId !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdWalletsDivisionJournal
     *
     * Get corporation wallet journal
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  int $division Wallet key of the division to fetch journals from (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWalletsDivisionJournal200Ok[]
     */
    public function getCorporationsCorporationIdWalletsDivisionJournal($corporationId, $division, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getCorporationsCorporationIdWalletsDivisionJournalWithHttpInfo($corporationId, $division, $datasource, $fromId, $token, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdWalletsDivisionJournalWithHttpInfo
     *
     * Get corporation wallet journal
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  int $division Wallet key of the division to fetch journals from (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWalletsDivisionJournal200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdWalletsDivisionJournalWithHttpInfo($corporationId, $division, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = '\nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWalletsDivisionJournal200Ok[]';
        $request = $this->getCorporationsCorporationIdWalletsDivisionJournalRequest($corporationId, $division, $datasource, $fromId, $token, $userAgent, $xUserAgent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWalletsDivisionJournal200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdWalletsDivisionJournalAsync
     *
     * Get corporation wallet journal
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  int $division Wallet key of the division to fetch journals from (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdWalletsDivisionJournalAsync($corporationId, $division, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        return $this->getCorporationsCorporationIdWalletsDivisionJournalAsyncWithHttpInfo($corporationId, $division, $datasource, $fromId, $token, $userAgent, $xUserAgent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdWalletsDivisionJournalAsyncWithHttpInfo
     *
     * Get corporation wallet journal
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  int $division Wallet key of the division to fetch journals from (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdWalletsDivisionJournalAsyncWithHttpInfo($corporationId, $division, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = '\nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWalletsDivisionJournal200Ok[]';
        $request = $this->getCorporationsCorporationIdWalletsDivisionJournalRequest($corporationId, $division, $datasource, $fromId, $token, $userAgent, $xUserAgent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdWalletsDivisionJournal'
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  int $division Wallet key of the division to fetch journals from (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCorporationsCorporationIdWalletsDivisionJournalRequest($corporationId, $division, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        // verify the required parameter 'corporationId' is set
        if ($corporationId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporationId when calling getCorporationsCorporationIdWalletsDivisionJournal'
            );
        }
        if ($corporationId < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporationId" when calling WalletApi.getCorporationsCorporationIdWalletsDivisionJournal, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'division' is set
        if ($division === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling getCorporationsCorporationIdWalletsDivisionJournal'
            );
        }
        if ($division > 7) {
            throw new \InvalidArgumentException('invalid value for "$division" when calling WalletApi.getCorporationsCorporationIdWalletsDivisionJournal, must be smaller than or equal to 7.');
        }
        if ($division < 1) {
            throw new \InvalidArgumentException('invalid value for "$division" when calling WalletApi.getCorporationsCorporationIdWalletsDivisionJournal, must be bigger than or equal to 1.');
        }


        $resourcePath = '/corporations/{corporation_id}/wallets/{division}/journal/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($fromId !== null) {
            $queryParams['from_id'] = ObjectSerializer::toQueryValue($fromId);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = ObjectSerializer::toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = ObjectSerializer::toHeaderValue($xUserAgent);
        }

        // path params
        if ($corporationId !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporationId),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdWalletsDivisionTransactions
     *
     * Get corporation wallet transactions
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  int $division Wallet key of the division to fetch journals from (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWalletsDivisionTransactions200Ok[]
     */
    public function getCorporationsCorporationIdWalletsDivisionTransactions($corporationId, $division, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        list($response) = $this->getCorporationsCorporationIdWalletsDivisionTransactionsWithHttpInfo($corporationId, $division, $datasource, $fromId, $token, $userAgent, $xUserAgent);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdWalletsDivisionTransactionsWithHttpInfo
     *
     * Get corporation wallet transactions
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  int $division Wallet key of the division to fetch journals from (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \nullx27\ESI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWalletsDivisionTransactions200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdWalletsDivisionTransactionsWithHttpInfo($corporationId, $division, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = '\nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWalletsDivisionTransactions200Ok[]';
        $request = $this->getCorporationsCorporationIdWalletsDivisionTransactionsRequest($corporationId, $division, $datasource, $fromId, $token, $userAgent, $xUserAgent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWalletsDivisionTransactions200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\nullx27\ESI\nullx27\ESI\Models\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdWalletsDivisionTransactionsAsync
     *
     * Get corporation wallet transactions
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  int $division Wallet key of the division to fetch journals from (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdWalletsDivisionTransactionsAsync($corporationId, $division, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        return $this->getCorporationsCorporationIdWalletsDivisionTransactionsAsyncWithHttpInfo($corporationId, $division, $datasource, $fromId, $token, $userAgent, $xUserAgent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdWalletsDivisionTransactionsAsyncWithHttpInfo
     *
     * Get corporation wallet transactions
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  int $division Wallet key of the division to fetch journals from (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCorporationsCorporationIdWalletsDivisionTransactionsAsyncWithHttpInfo($corporationId, $division, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        $returnType = '\nullx27\ESI\nullx27\ESI\Models\GetCorporationsCorporationIdWalletsDivisionTransactions200Ok[]';
        $request = $this->getCorporationsCorporationIdWalletsDivisionTransactionsRequest($corporationId, $division, $datasource, $fromId, $token, $userAgent, $xUserAgent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdWalletsDivisionTransactions'
     *
     * @param  int $corporationId An EVE corporation ID (required)
     * @param  int $division Wallet key of the division to fetch journals from (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  int $fromId Only show journal entries happened before the transaction referenced by this id (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     * @param  string $userAgent Client identifier, takes precedence over headers (optional)
     * @param  string $xUserAgent Client identifier, takes precedence over User-Agent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCorporationsCorporationIdWalletsDivisionTransactionsRequest($corporationId, $division, $datasource = 'tranquility', $fromId = null, $token = null, $userAgent = null, $xUserAgent = null)
    {
        // verify the required parameter 'corporationId' is set
        if ($corporationId === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporationId when calling getCorporationsCorporationIdWalletsDivisionTransactions'
            );
        }
        if ($corporationId < 1) {
            throw new \InvalidArgumentException('invalid value for "$corporationId" when calling WalletApi.getCorporationsCorporationIdWalletsDivisionTransactions, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'division' is set
        if ($division === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling getCorporationsCorporationIdWalletsDivisionTransactions'
            );
        }
        if ($division > 7) {
            throw new \InvalidArgumentException('invalid value for "$division" when calling WalletApi.getCorporationsCorporationIdWalletsDivisionTransactions, must be smaller than or equal to 7.');
        }
        if ($division < 1) {
            throw new \InvalidArgumentException('invalid value for "$division" when calling WalletApi.getCorporationsCorporationIdWalletsDivisionTransactions, must be bigger than or equal to 1.');
        }


        $resourcePath = '/corporations/{corporation_id}/wallets/{division}/transactions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($fromId !== null) {
            $queryParams['from_id'] = ObjectSerializer::toQueryValue($fromId);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // query params
        if ($userAgent !== null) {
            $queryParams['user_agent'] = ObjectSerializer::toQueryValue($userAgent);
        }
        // header params
        if ($xUserAgent !== null) {
            $headerParams['X-User-Agent'] = ObjectSerializer::toHeaderValue($xUserAgent);
        }

        // path params
        if ($corporationId !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporationId),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
