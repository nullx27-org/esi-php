<?php
/**
 * GetFwLeaderboardsCharactersVictoryPoints
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetFwLeaderboardsCharactersVictoryPoints Class Doc Comment
 *
 * @category Class
 * @description Top 100 rankings of pilots by victory points from yesterday, last week and in total
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetFwLeaderboardsCharactersVictoryPoints implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_fw_leaderboards_characters_victory_points';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'yesterday' => '\nullx27\ESI\nullx27\ESI\Models\GetFwLeaderboardsCharactersYesterday1[]',
        'lastWeek' => '\nullx27\ESI\nullx27\ESI\Models\GetFwLeaderboardsCharactersLastWeek1[]',
        'activeTotal' => '\nullx27\ESI\nullx27\ESI\Models\GetFwLeaderboardsCharactersActiveTotal1[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'yesterday' => null,
        'lastWeek' => null,
        'activeTotal' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'yesterday' => 'yesterday',
        'lastWeek' => 'last_week',
        'activeTotal' => 'active_total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'yesterday' => 'setYesterday',
        'lastWeek' => 'setLastWeek',
        'activeTotal' => 'setActiveTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'yesterday' => 'getYesterday',
        'lastWeek' => 'getLastWeek',
        'activeTotal' => 'getActiveTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['yesterday'] = isset($data['yesterday']) ? $data['yesterday'] : null;
        $this->container['lastWeek'] = isset($data['lastWeek']) ? $data['lastWeek'] : null;
        $this->container['activeTotal'] = isset($data['activeTotal']) ? $data['activeTotal'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['yesterday'] === null) {
            $invalidProperties[] = "'yesterday' can't be null";
        }
        if ($this->container['lastWeek'] === null) {
            $invalidProperties[] = "'lastWeek' can't be null";
        }
        if ($this->container['activeTotal'] === null) {
            $invalidProperties[] = "'activeTotal' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['yesterday'] === null) {
            return false;
        }
        if ($this->container['lastWeek'] === null) {
            return false;
        }
        if ($this->container['activeTotal'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets yesterday
     *
     * @return \nullx27\ESI\nullx27\ESI\Models\GetFwLeaderboardsCharactersYesterday1[]
     */
    public function getYesterday()
    {
        return $this->container['yesterday'];
    }

    /**
     * Sets yesterday
     *
     * @param \nullx27\ESI\nullx27\ESI\Models\GetFwLeaderboardsCharactersYesterday1[] $yesterday Top 100 ranking of pilots by victory points in the past day
     *
     * @return $this
     */
    public function setYesterday($yesterday)
    {
        $this->container['yesterday'] = $yesterday;

        return $this;
    }

    /**
     * Gets lastWeek
     *
     * @return \nullx27\ESI\nullx27\ESI\Models\GetFwLeaderboardsCharactersLastWeek1[]
     */
    public function getLastWeek()
    {
        return $this->container['lastWeek'];
    }

    /**
     * Sets lastWeek
     *
     * @param \nullx27\ESI\nullx27\ESI\Models\GetFwLeaderboardsCharactersLastWeek1[] $lastWeek Top 100 ranking of pilots by victory points in the past week
     *
     * @return $this
     */
    public function setLastWeek($lastWeek)
    {
        $this->container['lastWeek'] = $lastWeek;

        return $this;
    }

    /**
     * Gets activeTotal
     *
     * @return \nullx27\ESI\nullx27\ESI\Models\GetFwLeaderboardsCharactersActiveTotal1[]
     */
    public function getActiveTotal()
    {
        return $this->container['activeTotal'];
    }

    /**
     * Sets activeTotal
     *
     * @param \nullx27\ESI\nullx27\ESI\Models\GetFwLeaderboardsCharactersActiveTotal1[] $activeTotal Top 100 ranking of pilots active in faction warfare by total victory points. A pilot is considered \"active\" if they have participated in faction warfare in the past 14 days.
     *
     * @return $this
     */
    public function setActiveTotal($activeTotal)
    {
        $this->container['activeTotal'] = $activeTotal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


