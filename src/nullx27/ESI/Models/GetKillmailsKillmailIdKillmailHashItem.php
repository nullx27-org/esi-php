<?php
/**
 * GetKillmailsKillmailIdKillmailHashItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetKillmailsKillmailIdKillmailHashItem Class Doc Comment
 *
 * @category Class
 * @description item object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetKillmailsKillmailIdKillmailHashItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_killmails_killmail_id_killmail_hash_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'itemTypeId' => 'int',
        'quantityDestroyed' => 'int',
        'quantityDropped' => 'int',
        'singleton' => 'int',
        'flag' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'itemTypeId' => 'int32',
        'quantityDestroyed' => 'int64',
        'quantityDropped' => 'int64',
        'singleton' => 'int32',
        'flag' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'itemTypeId' => 'item_type_id',
        'quantityDestroyed' => 'quantity_destroyed',
        'quantityDropped' => 'quantity_dropped',
        'singleton' => 'singleton',
        'flag' => 'flag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'itemTypeId' => 'setItemTypeId',
        'quantityDestroyed' => 'setQuantityDestroyed',
        'quantityDropped' => 'setQuantityDropped',
        'singleton' => 'setSingleton',
        'flag' => 'setFlag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'itemTypeId' => 'getItemTypeId',
        'quantityDestroyed' => 'getQuantityDestroyed',
        'quantityDropped' => 'getQuantityDropped',
        'singleton' => 'getSingleton',
        'flag' => 'getFlag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['itemTypeId'] = isset($data['itemTypeId']) ? $data['itemTypeId'] : null;
        $this->container['quantityDestroyed'] = isset($data['quantityDestroyed']) ? $data['quantityDestroyed'] : null;
        $this->container['quantityDropped'] = isset($data['quantityDropped']) ? $data['quantityDropped'] : null;
        $this->container['singleton'] = isset($data['singleton']) ? $data['singleton'] : null;
        $this->container['flag'] = isset($data['flag']) ? $data['flag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['itemTypeId'] === null) {
            $invalidProperties[] = "'itemTypeId' can't be null";
        }
        if ($this->container['singleton'] === null) {
            $invalidProperties[] = "'singleton' can't be null";
        }
        if ($this->container['flag'] === null) {
            $invalidProperties[] = "'flag' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['itemTypeId'] === null) {
            return false;
        }
        if ($this->container['singleton'] === null) {
            return false;
        }
        if ($this->container['flag'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets itemTypeId
     *
     * @return int
     */
    public function getItemTypeId()
    {
        return $this->container['itemTypeId'];
    }

    /**
     * Sets itemTypeId
     *
     * @param int $itemTypeId item_type_id integer
     *
     * @return $this
     */
    public function setItemTypeId($itemTypeId)
    {
        $this->container['itemTypeId'] = $itemTypeId;

        return $this;
    }

    /**
     * Gets quantityDestroyed
     *
     * @return int
     */
    public function getQuantityDestroyed()
    {
        return $this->container['quantityDestroyed'];
    }

    /**
     * Sets quantityDestroyed
     *
     * @param int $quantityDestroyed quantity_destroyed integer
     *
     * @return $this
     */
    public function setQuantityDestroyed($quantityDestroyed)
    {
        $this->container['quantityDestroyed'] = $quantityDestroyed;

        return $this;
    }

    /**
     * Gets quantityDropped
     *
     * @return int
     */
    public function getQuantityDropped()
    {
        return $this->container['quantityDropped'];
    }

    /**
     * Sets quantityDropped
     *
     * @param int $quantityDropped quantity_dropped integer
     *
     * @return $this
     */
    public function setQuantityDropped($quantityDropped)
    {
        $this->container['quantityDropped'] = $quantityDropped;

        return $this;
    }

    /**
     * Gets singleton
     *
     * @return int
     */
    public function getSingleton()
    {
        return $this->container['singleton'];
    }

    /**
     * Sets singleton
     *
     * @param int $singleton singleton integer
     *
     * @return $this
     */
    public function setSingleton($singleton)
    {
        $this->container['singleton'] = $singleton;

        return $this;
    }

    /**
     * Gets flag
     *
     * @return int
     */
    public function getFlag()
    {
        return $this->container['flag'];
    }

    /**
     * Sets flag
     *
     * @param int $flag flag integer
     *
     * @return $this
     */
    public function setFlag($flag)
    {
        $this->container['flag'] = $flag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


