<?php
/**
 * GetCorporationsCorporationIdCustomsOffices200Ok
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetCorporationsCorporationIdCustomsOffices200Ok Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetCorporationsCorporationIdCustomsOffices200Ok implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_corporations_corporation_id_customs_offices_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'officeId' => 'int',
        'systemId' => 'int',
        'reinforceExitStart' => 'int',
        'reinforceExitEnd' => 'int',
        'corporationTaxRate' => 'float',
        'allowAllianceAccess' => 'bool',
        'allianceTaxRate' => 'float',
        'allowAccessWithStandings' => 'bool',
        'standingLevel' => 'string',
        'excellentStandingTaxRate' => 'float',
        'goodStandingTaxRate' => 'float',
        'neutralStandingTaxRate' => 'float',
        'badStandingTaxRate' => 'float',
        'terribleStandingTaxRate' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'officeId' => 'int64',
        'systemId' => 'int32',
        'reinforceExitStart' => 'int32',
        'reinforceExitEnd' => 'int32',
        'corporationTaxRate' => 'float',
        'allowAllianceAccess' => null,
        'allianceTaxRate' => 'float',
        'allowAccessWithStandings' => null,
        'standingLevel' => null,
        'excellentStandingTaxRate' => 'float',
        'goodStandingTaxRate' => 'float',
        'neutralStandingTaxRate' => 'float',
        'badStandingTaxRate' => 'float',
        'terribleStandingTaxRate' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'officeId' => 'office_id',
        'systemId' => 'system_id',
        'reinforceExitStart' => 'reinforce_exit_start',
        'reinforceExitEnd' => 'reinforce_exit_end',
        'corporationTaxRate' => 'corporation_tax_rate',
        'allowAllianceAccess' => 'allow_alliance_access',
        'allianceTaxRate' => 'alliance_tax_rate',
        'allowAccessWithStandings' => 'allow_access_with_standings',
        'standingLevel' => 'standing_level',
        'excellentStandingTaxRate' => 'excellent_standing_tax_rate',
        'goodStandingTaxRate' => 'good_standing_tax_rate',
        'neutralStandingTaxRate' => 'neutral_standing_tax_rate',
        'badStandingTaxRate' => 'bad_standing_tax_rate',
        'terribleStandingTaxRate' => 'terrible_standing_tax_rate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'officeId' => 'setOfficeId',
        'systemId' => 'setSystemId',
        'reinforceExitStart' => 'setReinforceExitStart',
        'reinforceExitEnd' => 'setReinforceExitEnd',
        'corporationTaxRate' => 'setCorporationTaxRate',
        'allowAllianceAccess' => 'setAllowAllianceAccess',
        'allianceTaxRate' => 'setAllianceTaxRate',
        'allowAccessWithStandings' => 'setAllowAccessWithStandings',
        'standingLevel' => 'setStandingLevel',
        'excellentStandingTaxRate' => 'setExcellentStandingTaxRate',
        'goodStandingTaxRate' => 'setGoodStandingTaxRate',
        'neutralStandingTaxRate' => 'setNeutralStandingTaxRate',
        'badStandingTaxRate' => 'setBadStandingTaxRate',
        'terribleStandingTaxRate' => 'setTerribleStandingTaxRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'officeId' => 'getOfficeId',
        'systemId' => 'getSystemId',
        'reinforceExitStart' => 'getReinforceExitStart',
        'reinforceExitEnd' => 'getReinforceExitEnd',
        'corporationTaxRate' => 'getCorporationTaxRate',
        'allowAllianceAccess' => 'getAllowAllianceAccess',
        'allianceTaxRate' => 'getAllianceTaxRate',
        'allowAccessWithStandings' => 'getAllowAccessWithStandings',
        'standingLevel' => 'getStandingLevel',
        'excellentStandingTaxRate' => 'getExcellentStandingTaxRate',
        'goodStandingTaxRate' => 'getGoodStandingTaxRate',
        'neutralStandingTaxRate' => 'getNeutralStandingTaxRate',
        'badStandingTaxRate' => 'getBadStandingTaxRate',
        'terribleStandingTaxRate' => 'getTerribleStandingTaxRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STANDING_LEVEL_BAD = 'bad';
    const STANDING_LEVEL_EXCELLENT = 'excellent';
    const STANDING_LEVEL_GOOD = 'good';
    const STANDING_LEVEL_NEUTRAL = 'neutral';
    const STANDING_LEVEL_TERRIBLE = 'terrible';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStandingLevelAllowableValues()
    {
        return [
            self::STANDING_LEVEL_BAD,
            self::STANDING_LEVEL_EXCELLENT,
            self::STANDING_LEVEL_GOOD,
            self::STANDING_LEVEL_NEUTRAL,
            self::STANDING_LEVEL_TERRIBLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['officeId'] = isset($data['officeId']) ? $data['officeId'] : null;
        $this->container['systemId'] = isset($data['systemId']) ? $data['systemId'] : null;
        $this->container['reinforceExitStart'] = isset($data['reinforceExitStart']) ? $data['reinforceExitStart'] : null;
        $this->container['reinforceExitEnd'] = isset($data['reinforceExitEnd']) ? $data['reinforceExitEnd'] : null;
        $this->container['corporationTaxRate'] = isset($data['corporationTaxRate']) ? $data['corporationTaxRate'] : null;
        $this->container['allowAllianceAccess'] = isset($data['allowAllianceAccess']) ? $data['allowAllianceAccess'] : null;
        $this->container['allianceTaxRate'] = isset($data['allianceTaxRate']) ? $data['allianceTaxRate'] : null;
        $this->container['allowAccessWithStandings'] = isset($data['allowAccessWithStandings']) ? $data['allowAccessWithStandings'] : null;
        $this->container['standingLevel'] = isset($data['standingLevel']) ? $data['standingLevel'] : null;
        $this->container['excellentStandingTaxRate'] = isset($data['excellentStandingTaxRate']) ? $data['excellentStandingTaxRate'] : null;
        $this->container['goodStandingTaxRate'] = isset($data['goodStandingTaxRate']) ? $data['goodStandingTaxRate'] : null;
        $this->container['neutralStandingTaxRate'] = isset($data['neutralStandingTaxRate']) ? $data['neutralStandingTaxRate'] : null;
        $this->container['badStandingTaxRate'] = isset($data['badStandingTaxRate']) ? $data['badStandingTaxRate'] : null;
        $this->container['terribleStandingTaxRate'] = isset($data['terribleStandingTaxRate']) ? $data['terribleStandingTaxRate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['officeId'] === null) {
            $invalidProperties[] = "'officeId' can't be null";
        }
        if ($this->container['systemId'] === null) {
            $invalidProperties[] = "'systemId' can't be null";
        }
        if ($this->container['reinforceExitStart'] === null) {
            $invalidProperties[] = "'reinforceExitStart' can't be null";
        }
        if (($this->container['reinforceExitStart'] > 23)) {
            $invalidProperties[] = "invalid value for 'reinforceExitStart', must be smaller than or equal to 23.";
        }

        if (($this->container['reinforceExitStart'] < 0)) {
            $invalidProperties[] = "invalid value for 'reinforceExitStart', must be bigger than or equal to 0.";
        }

        if ($this->container['reinforceExitEnd'] === null) {
            $invalidProperties[] = "'reinforceExitEnd' can't be null";
        }
        if (($this->container['reinforceExitEnd'] > 23)) {
            $invalidProperties[] = "invalid value for 'reinforceExitEnd', must be smaller than or equal to 23.";
        }

        if (($this->container['reinforceExitEnd'] < 0)) {
            $invalidProperties[] = "invalid value for 'reinforceExitEnd', must be bigger than or equal to 0.";
        }

        if ($this->container['allowAllianceAccess'] === null) {
            $invalidProperties[] = "'allowAllianceAccess' can't be null";
        }
        if ($this->container['allowAccessWithStandings'] === null) {
            $invalidProperties[] = "'allowAccessWithStandings' can't be null";
        }
        $allowedValues = $this->getStandingLevelAllowableValues();
        if (!in_array($this->container['standingLevel'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'standingLevel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['officeId'] === null) {
            return false;
        }
        if ($this->container['systemId'] === null) {
            return false;
        }
        if ($this->container['reinforceExitStart'] === null) {
            return false;
        }
        if ($this->container['reinforceExitStart'] > 23) {
            return false;
        }
        if ($this->container['reinforceExitStart'] < 0) {
            return false;
        }
        if ($this->container['reinforceExitEnd'] === null) {
            return false;
        }
        if ($this->container['reinforceExitEnd'] > 23) {
            return false;
        }
        if ($this->container['reinforceExitEnd'] < 0) {
            return false;
        }
        if ($this->container['allowAllianceAccess'] === null) {
            return false;
        }
        if ($this->container['allowAccessWithStandings'] === null) {
            return false;
        }
        $allowedValues = $this->getStandingLevelAllowableValues();
        if (!in_array($this->container['standingLevel'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets officeId
     *
     * @return int
     */
    public function getOfficeId()
    {
        return $this->container['officeId'];
    }

    /**
     * Sets officeId
     *
     * @param int $officeId unique ID of this customs office
     *
     * @return $this
     */
    public function setOfficeId($officeId)
    {
        $this->container['officeId'] = $officeId;

        return $this;
    }

    /**
     * Gets systemId
     *
     * @return int
     */
    public function getSystemId()
    {
        return $this->container['systemId'];
    }

    /**
     * Sets systemId
     *
     * @param int $systemId ID of the solar system this customs office is located in
     *
     * @return $this
     */
    public function setSystemId($systemId)
    {
        $this->container['systemId'] = $systemId;

        return $this;
    }

    /**
     * Gets reinforceExitStart
     *
     * @return int
     */
    public function getReinforceExitStart()
    {
        return $this->container['reinforceExitStart'];
    }

    /**
     * Sets reinforceExitStart
     *
     * @param int $reinforceExitStart Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack
     *
     * @return $this
     */
    public function setReinforceExitStart($reinforceExitStart)
    {

        if (($reinforceExitStart > 23)) {
            throw new \InvalidArgumentException('invalid value for $reinforceExitStart when calling GetCorporationsCorporationIdCustomsOffices200Ok., must be smaller than or equal to 23.');
        }
        if (($reinforceExitStart < 0)) {
            throw new \InvalidArgumentException('invalid value for $reinforceExitStart when calling GetCorporationsCorporationIdCustomsOffices200Ok., must be bigger than or equal to 0.');
        }

        $this->container['reinforceExitStart'] = $reinforceExitStart;

        return $this;
    }

    /**
     * Gets reinforceExitEnd
     *
     * @return int
     */
    public function getReinforceExitEnd()
    {
        return $this->container['reinforceExitEnd'];
    }

    /**
     * Sets reinforceExitEnd
     *
     * @param int $reinforceExitEnd reinforce_exit_end integer
     *
     * @return $this
     */
    public function setReinforceExitEnd($reinforceExitEnd)
    {

        if (($reinforceExitEnd > 23)) {
            throw new \InvalidArgumentException('invalid value for $reinforceExitEnd when calling GetCorporationsCorporationIdCustomsOffices200Ok., must be smaller than or equal to 23.');
        }
        if (($reinforceExitEnd < 0)) {
            throw new \InvalidArgumentException('invalid value for $reinforceExitEnd when calling GetCorporationsCorporationIdCustomsOffices200Ok., must be bigger than or equal to 0.');
        }

        $this->container['reinforceExitEnd'] = $reinforceExitEnd;

        return $this;
    }

    /**
     * Gets corporationTaxRate
     *
     * @return float
     */
    public function getCorporationTaxRate()
    {
        return $this->container['corporationTaxRate'];
    }

    /**
     * Sets corporationTaxRate
     *
     * @param float $corporationTaxRate corporation_tax_rate number
     *
     * @return $this
     */
    public function setCorporationTaxRate($corporationTaxRate)
    {
        $this->container['corporationTaxRate'] = $corporationTaxRate;

        return $this;
    }

    /**
     * Gets allowAllianceAccess
     *
     * @return bool
     */
    public function getAllowAllianceAccess()
    {
        return $this->container['allowAllianceAccess'];
    }

    /**
     * Sets allowAllianceAccess
     *
     * @param bool $allowAllianceAccess allow_alliance_access boolean
     *
     * @return $this
     */
    public function setAllowAllianceAccess($allowAllianceAccess)
    {
        $this->container['allowAllianceAccess'] = $allowAllianceAccess;

        return $this;
    }

    /**
     * Gets allianceTaxRate
     *
     * @return float
     */
    public function getAllianceTaxRate()
    {
        return $this->container['allianceTaxRate'];
    }

    /**
     * Sets allianceTaxRate
     *
     * @param float $allianceTaxRate Only present if alliance access is allowed
     *
     * @return $this
     */
    public function setAllianceTaxRate($allianceTaxRate)
    {
        $this->container['allianceTaxRate'] = $allianceTaxRate;

        return $this;
    }

    /**
     * Gets allowAccessWithStandings
     *
     * @return bool
     */
    public function getAllowAccessWithStandings()
    {
        return $this->container['allowAccessWithStandings'];
    }

    /**
     * Sets allowAccessWithStandings
     *
     * @param bool $allowAccessWithStandings standing_level and any standing related tax rate only present when this is true
     *
     * @return $this
     */
    public function setAllowAccessWithStandings($allowAccessWithStandings)
    {
        $this->container['allowAccessWithStandings'] = $allowAccessWithStandings;

        return $this;
    }

    /**
     * Gets standingLevel
     *
     * @return string
     */
    public function getStandingLevel()
    {
        return $this->container['standingLevel'];
    }

    /**
     * Sets standingLevel
     *
     * @param string $standingLevel Access is allowed only for entities with this level of standing or better
     *
     * @return $this
     */
    public function setStandingLevel($standingLevel)
    {
        $allowedValues = $this->getStandingLevelAllowableValues();
        if (!is_null($standingLevel) && !in_array($standingLevel, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'standingLevel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['standingLevel'] = $standingLevel;

        return $this;
    }

    /**
     * Gets excellentStandingTaxRate
     *
     * @return float
     */
    public function getExcellentStandingTaxRate()
    {
        return $this->container['excellentStandingTaxRate'];
    }

    /**
     * Sets excellentStandingTaxRate
     *
     * @param float $excellentStandingTaxRate Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates
     *
     * @return $this
     */
    public function setExcellentStandingTaxRate($excellentStandingTaxRate)
    {
        $this->container['excellentStandingTaxRate'] = $excellentStandingTaxRate;

        return $this;
    }

    /**
     * Gets goodStandingTaxRate
     *
     * @return float
     */
    public function getGoodStandingTaxRate()
    {
        return $this->container['goodStandingTaxRate'];
    }

    /**
     * Sets goodStandingTaxRate
     *
     * @param float $goodStandingTaxRate good_standing_tax_rate number
     *
     * @return $this
     */
    public function setGoodStandingTaxRate($goodStandingTaxRate)
    {
        $this->container['goodStandingTaxRate'] = $goodStandingTaxRate;

        return $this;
    }

    /**
     * Gets neutralStandingTaxRate
     *
     * @return float
     */
    public function getNeutralStandingTaxRate()
    {
        return $this->container['neutralStandingTaxRate'];
    }

    /**
     * Sets neutralStandingTaxRate
     *
     * @param float $neutralStandingTaxRate neutral_standing_tax_rate number
     *
     * @return $this
     */
    public function setNeutralStandingTaxRate($neutralStandingTaxRate)
    {
        $this->container['neutralStandingTaxRate'] = $neutralStandingTaxRate;

        return $this;
    }

    /**
     * Gets badStandingTaxRate
     *
     * @return float
     */
    public function getBadStandingTaxRate()
    {
        return $this->container['badStandingTaxRate'];
    }

    /**
     * Sets badStandingTaxRate
     *
     * @param float $badStandingTaxRate bad_standing_tax_rate number
     *
     * @return $this
     */
    public function setBadStandingTaxRate($badStandingTaxRate)
    {
        $this->container['badStandingTaxRate'] = $badStandingTaxRate;

        return $this;
    }

    /**
     * Gets terribleStandingTaxRate
     *
     * @return float
     */
    public function getTerribleStandingTaxRate()
    {
        return $this->container['terribleStandingTaxRate'];
    }

    /**
     * Sets terribleStandingTaxRate
     *
     * @param float $terribleStandingTaxRate terrible_standing_tax_rate number
     *
     * @return $this
     */
    public function setTerribleStandingTaxRate($terribleStandingTaxRate)
    {
        $this->container['terribleStandingTaxRate'] = $terribleStandingTaxRate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


