<?php
/**
 * GetCharactersCharacterIdSkillsSkill
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetCharactersCharacterIdSkillsSkill Class Doc Comment
 *
 * @category Class
 * @description skill object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetCharactersCharacterIdSkillsSkill implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_characters_character_id_skills_skill';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'skillId' => 'int',
        'skillpointsInSkill' => 'int',
        'trainedSkillLevel' => 'int',
        'activeSkillLevel' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'skillId' => 'int32',
        'skillpointsInSkill' => 'int64',
        'trainedSkillLevel' => 'int32',
        'activeSkillLevel' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'skillId' => 'skill_id',
        'skillpointsInSkill' => 'skillpoints_in_skill',
        'trainedSkillLevel' => 'trained_skill_level',
        'activeSkillLevel' => 'active_skill_level'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'skillId' => 'setSkillId',
        'skillpointsInSkill' => 'setSkillpointsInSkill',
        'trainedSkillLevel' => 'setTrainedSkillLevel',
        'activeSkillLevel' => 'setActiveSkillLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'skillId' => 'getSkillId',
        'skillpointsInSkill' => 'getSkillpointsInSkill',
        'trainedSkillLevel' => 'getTrainedSkillLevel',
        'activeSkillLevel' => 'getActiveSkillLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['skillId'] = isset($data['skillId']) ? $data['skillId'] : null;
        $this->container['skillpointsInSkill'] = isset($data['skillpointsInSkill']) ? $data['skillpointsInSkill'] : null;
        $this->container['trainedSkillLevel'] = isset($data['trainedSkillLevel']) ? $data['trainedSkillLevel'] : null;
        $this->container['activeSkillLevel'] = isset($data['activeSkillLevel']) ? $data['activeSkillLevel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['skillId'] === null) {
            $invalidProperties[] = "'skillId' can't be null";
        }
        if ($this->container['skillpointsInSkill'] === null) {
            $invalidProperties[] = "'skillpointsInSkill' can't be null";
        }
        if ($this->container['trainedSkillLevel'] === null) {
            $invalidProperties[] = "'trainedSkillLevel' can't be null";
        }
        if ($this->container['activeSkillLevel'] === null) {
            $invalidProperties[] = "'activeSkillLevel' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['skillId'] === null) {
            return false;
        }
        if ($this->container['skillpointsInSkill'] === null) {
            return false;
        }
        if ($this->container['trainedSkillLevel'] === null) {
            return false;
        }
        if ($this->container['activeSkillLevel'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets skillId
     *
     * @return int
     */
    public function getSkillId()
    {
        return $this->container['skillId'];
    }

    /**
     * Sets skillId
     *
     * @param int $skillId skill_id integer
     *
     * @return $this
     */
    public function setSkillId($skillId)
    {
        $this->container['skillId'] = $skillId;

        return $this;
    }

    /**
     * Gets skillpointsInSkill
     *
     * @return int
     */
    public function getSkillpointsInSkill()
    {
        return $this->container['skillpointsInSkill'];
    }

    /**
     * Sets skillpointsInSkill
     *
     * @param int $skillpointsInSkill skillpoints_in_skill integer
     *
     * @return $this
     */
    public function setSkillpointsInSkill($skillpointsInSkill)
    {
        $this->container['skillpointsInSkill'] = $skillpointsInSkill;

        return $this;
    }

    /**
     * Gets trainedSkillLevel
     *
     * @return int
     */
    public function getTrainedSkillLevel()
    {
        return $this->container['trainedSkillLevel'];
    }

    /**
     * Sets trainedSkillLevel
     *
     * @param int $trainedSkillLevel trained_skill_level integer
     *
     * @return $this
     */
    public function setTrainedSkillLevel($trainedSkillLevel)
    {
        $this->container['trainedSkillLevel'] = $trainedSkillLevel;

        return $this;
    }

    /**
     * Gets activeSkillLevel
     *
     * @return int
     */
    public function getActiveSkillLevel()
    {
        return $this->container['activeSkillLevel'];
    }

    /**
     * Sets activeSkillLevel
     *
     * @param int $activeSkillLevel active_skill_level integer
     *
     * @return $this
     */
    public function setActiveSkillLevel($activeSkillLevel)
    {
        $this->container['activeSkillLevel'] = $activeSkillLevel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


