<?php
/**
 * GetKillmailsKillmailIdKillmailHashVictim
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetKillmailsKillmailIdKillmailHashVictim Class Doc Comment
 *
 * @category Class
 * @description victim object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetKillmailsKillmailIdKillmailHashVictim implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_killmails_killmail_id_killmail_hash_victim';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'characterId' => 'int',
        'corporationId' => 'int',
        'allianceId' => 'int',
        'factionId' => 'int',
        'damageTaken' => 'int',
        'shipTypeId' => 'int',
        'items' => '\nullx27\ESI\nullx27\ESI\Models\GetKillmailsKillmailIdKillmailHashItem1[]',
        'position' => '\nullx27\ESI\nullx27\ESI\Models\GetKillmailsKillmailIdKillmailHashPosition'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'characterId' => 'int32',
        'corporationId' => 'int32',
        'allianceId' => 'int32',
        'factionId' => 'int32',
        'damageTaken' => 'int32',
        'shipTypeId' => 'int32',
        'items' => null,
        'position' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'characterId' => 'character_id',
        'corporationId' => 'corporation_id',
        'allianceId' => 'alliance_id',
        'factionId' => 'faction_id',
        'damageTaken' => 'damage_taken',
        'shipTypeId' => 'ship_type_id',
        'items' => 'items',
        'position' => 'position'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'characterId' => 'setCharacterId',
        'corporationId' => 'setCorporationId',
        'allianceId' => 'setAllianceId',
        'factionId' => 'setFactionId',
        'damageTaken' => 'setDamageTaken',
        'shipTypeId' => 'setShipTypeId',
        'items' => 'setItems',
        'position' => 'setPosition'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'characterId' => 'getCharacterId',
        'corporationId' => 'getCorporationId',
        'allianceId' => 'getAllianceId',
        'factionId' => 'getFactionId',
        'damageTaken' => 'getDamageTaken',
        'shipTypeId' => 'getShipTypeId',
        'items' => 'getItems',
        'position' => 'getPosition'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['characterId'] = isset($data['characterId']) ? $data['characterId'] : null;
        $this->container['corporationId'] = isset($data['corporationId']) ? $data['corporationId'] : null;
        $this->container['allianceId'] = isset($data['allianceId']) ? $data['allianceId'] : null;
        $this->container['factionId'] = isset($data['factionId']) ? $data['factionId'] : null;
        $this->container['damageTaken'] = isset($data['damageTaken']) ? $data['damageTaken'] : null;
        $this->container['shipTypeId'] = isset($data['shipTypeId']) ? $data['shipTypeId'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['damageTaken'] === null) {
            $invalidProperties[] = "'damageTaken' can't be null";
        }
        if ($this->container['shipTypeId'] === null) {
            $invalidProperties[] = "'shipTypeId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['damageTaken'] === null) {
            return false;
        }
        if ($this->container['shipTypeId'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets characterId
     *
     * @return int
     */
    public function getCharacterId()
    {
        return $this->container['characterId'];
    }

    /**
     * Sets characterId
     *
     * @param int $characterId character_id integer
     *
     * @return $this
     */
    public function setCharacterId($characterId)
    {
        $this->container['characterId'] = $characterId;

        return $this;
    }

    /**
     * Gets corporationId
     *
     * @return int
     */
    public function getCorporationId()
    {
        return $this->container['corporationId'];
    }

    /**
     * Sets corporationId
     *
     * @param int $corporationId corporation_id integer
     *
     * @return $this
     */
    public function setCorporationId($corporationId)
    {
        $this->container['corporationId'] = $corporationId;

        return $this;
    }

    /**
     * Gets allianceId
     *
     * @return int
     */
    public function getAllianceId()
    {
        return $this->container['allianceId'];
    }

    /**
     * Sets allianceId
     *
     * @param int $allianceId alliance_id integer
     *
     * @return $this
     */
    public function setAllianceId($allianceId)
    {
        $this->container['allianceId'] = $allianceId;

        return $this;
    }

    /**
     * Gets factionId
     *
     * @return int
     */
    public function getFactionId()
    {
        return $this->container['factionId'];
    }

    /**
     * Sets factionId
     *
     * @param int $factionId faction_id integer
     *
     * @return $this
     */
    public function setFactionId($factionId)
    {
        $this->container['factionId'] = $factionId;

        return $this;
    }

    /**
     * Gets damageTaken
     *
     * @return int
     */
    public function getDamageTaken()
    {
        return $this->container['damageTaken'];
    }

    /**
     * Sets damageTaken
     *
     * @param int $damageTaken How much total damage was taken by the victim
     *
     * @return $this
     */
    public function setDamageTaken($damageTaken)
    {
        $this->container['damageTaken'] = $damageTaken;

        return $this;
    }

    /**
     * Gets shipTypeId
     *
     * @return int
     */
    public function getShipTypeId()
    {
        return $this->container['shipTypeId'];
    }

    /**
     * Sets shipTypeId
     *
     * @param int $shipTypeId The ship that the victim was piloting and was destroyed
     *
     * @return $this
     */
    public function setShipTypeId($shipTypeId)
    {
        $this->container['shipTypeId'] = $shipTypeId;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \nullx27\ESI\nullx27\ESI\Models\GetKillmailsKillmailIdKillmailHashItem1[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \nullx27\ESI\nullx27\ESI\Models\GetKillmailsKillmailIdKillmailHashItem1[] $items items array
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets position
     *
     * @return \nullx27\ESI\nullx27\ESI\Models\GetKillmailsKillmailIdKillmailHashPosition
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param \nullx27\ESI\nullx27\ESI\Models\GetKillmailsKillmailIdKillmailHashPosition $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


