<?php
/**
 * GetCorporationsCorporationIdOk
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetCorporationsCorporationIdOk Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetCorporationsCorporationIdOk implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_corporations_corporation_id_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'ticker' => 'string',
        'memberCount' => 'int',
        'ceoId' => 'int',
        'allianceId' => 'int',
        'description' => 'string',
        'taxRate' => 'float',
        'dateFounded' => '\DateTime',
        'creatorId' => 'int',
        'url' => 'string',
        'factionId' => 'int',
        'homeStationId' => 'int',
        'shares' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'ticker' => null,
        'memberCount' => 'int32',
        'ceoId' => 'int32',
        'allianceId' => 'int32',
        'description' => null,
        'taxRate' => 'float',
        'dateFounded' => 'date-time',
        'creatorId' => 'int32',
        'url' => null,
        'factionId' => 'int32',
        'homeStationId' => 'int32',
        'shares' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'ticker' => 'ticker',
        'memberCount' => 'member_count',
        'ceoId' => 'ceo_id',
        'allianceId' => 'alliance_id',
        'description' => 'description',
        'taxRate' => 'tax_rate',
        'dateFounded' => 'date_founded',
        'creatorId' => 'creator_id',
        'url' => 'url',
        'factionId' => 'faction_id',
        'homeStationId' => 'home_station_id',
        'shares' => 'shares'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'ticker' => 'setTicker',
        'memberCount' => 'setMemberCount',
        'ceoId' => 'setCeoId',
        'allianceId' => 'setAllianceId',
        'description' => 'setDescription',
        'taxRate' => 'setTaxRate',
        'dateFounded' => 'setDateFounded',
        'creatorId' => 'setCreatorId',
        'url' => 'setUrl',
        'factionId' => 'setFactionId',
        'homeStationId' => 'setHomeStationId',
        'shares' => 'setShares'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'ticker' => 'getTicker',
        'memberCount' => 'getMemberCount',
        'ceoId' => 'getCeoId',
        'allianceId' => 'getAllianceId',
        'description' => 'getDescription',
        'taxRate' => 'getTaxRate',
        'dateFounded' => 'getDateFounded',
        'creatorId' => 'getCreatorId',
        'url' => 'getUrl',
        'factionId' => 'getFactionId',
        'homeStationId' => 'getHomeStationId',
        'shares' => 'getShares'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['ticker'] = isset($data['ticker']) ? $data['ticker'] : null;
        $this->container['memberCount'] = isset($data['memberCount']) ? $data['memberCount'] : null;
        $this->container['ceoId'] = isset($data['ceoId']) ? $data['ceoId'] : null;
        $this->container['allianceId'] = isset($data['allianceId']) ? $data['allianceId'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['taxRate'] = isset($data['taxRate']) ? $data['taxRate'] : null;
        $this->container['dateFounded'] = isset($data['dateFounded']) ? $data['dateFounded'] : null;
        $this->container['creatorId'] = isset($data['creatorId']) ? $data['creatorId'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['factionId'] = isset($data['factionId']) ? $data['factionId'] : null;
        $this->container['homeStationId'] = isset($data['homeStationId']) ? $data['homeStationId'] : null;
        $this->container['shares'] = isset($data['shares']) ? $data['shares'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['ticker'] === null) {
            $invalidProperties[] = "'ticker' can't be null";
        }
        if ($this->container['memberCount'] === null) {
            $invalidProperties[] = "'memberCount' can't be null";
        }
        if ($this->container['ceoId'] === null) {
            $invalidProperties[] = "'ceoId' can't be null";
        }
        if ($this->container['taxRate'] === null) {
            $invalidProperties[] = "'taxRate' can't be null";
        }
        if (($this->container['taxRate'] > 1)) {
            $invalidProperties[] = "invalid value for 'taxRate', must be smaller than or equal to 1.";
        }

        if (($this->container['taxRate'] < 0)) {
            $invalidProperties[] = "invalid value for 'taxRate', must be bigger than or equal to 0.";
        }

        if ($this->container['creatorId'] === null) {
            $invalidProperties[] = "'creatorId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['ticker'] === null) {
            return false;
        }
        if ($this->container['memberCount'] === null) {
            return false;
        }
        if ($this->container['ceoId'] === null) {
            return false;
        }
        if ($this->container['taxRate'] === null) {
            return false;
        }
        if ($this->container['taxRate'] > 1) {
            return false;
        }
        if ($this->container['taxRate'] < 0) {
            return false;
        }
        if ($this->container['creatorId'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name the full name of the corporation
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ticker
     *
     * @return string
     */
    public function getTicker()
    {
        return $this->container['ticker'];
    }

    /**
     * Sets ticker
     *
     * @param string $ticker the short name of the corporation
     *
     * @return $this
     */
    public function setTicker($ticker)
    {
        $this->container['ticker'] = $ticker;

        return $this;
    }

    /**
     * Gets memberCount
     *
     * @return int
     */
    public function getMemberCount()
    {
        return $this->container['memberCount'];
    }

    /**
     * Sets memberCount
     *
     * @param int $memberCount member_count integer
     *
     * @return $this
     */
    public function setMemberCount($memberCount)
    {
        $this->container['memberCount'] = $memberCount;

        return $this;
    }

    /**
     * Gets ceoId
     *
     * @return int
     */
    public function getCeoId()
    {
        return $this->container['ceoId'];
    }

    /**
     * Sets ceoId
     *
     * @param int $ceoId ceo_id integer
     *
     * @return $this
     */
    public function setCeoId($ceoId)
    {
        $this->container['ceoId'] = $ceoId;

        return $this;
    }

    /**
     * Gets allianceId
     *
     * @return int
     */
    public function getAllianceId()
    {
        return $this->container['allianceId'];
    }

    /**
     * Sets allianceId
     *
     * @param int $allianceId ID of the alliance that corporation is a member of, if any
     *
     * @return $this
     */
    public function setAllianceId($allianceId)
    {
        $this->container['allianceId'] = $allianceId;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description string
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets taxRate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['taxRate'];
    }

    /**
     * Sets taxRate
     *
     * @param float $taxRate tax_rate number
     *
     * @return $this
     */
    public function setTaxRate($taxRate)
    {

        if (($taxRate > 1)) {
            throw new \InvalidArgumentException('invalid value for $taxRate when calling GetCorporationsCorporationIdOk., must be smaller than or equal to 1.');
        }
        if (($taxRate < 0)) {
            throw new \InvalidArgumentException('invalid value for $taxRate when calling GetCorporationsCorporationIdOk., must be bigger than or equal to 0.');
        }

        $this->container['taxRate'] = $taxRate;

        return $this;
    }

    /**
     * Gets dateFounded
     *
     * @return \DateTime
     */
    public function getDateFounded()
    {
        return $this->container['dateFounded'];
    }

    /**
     * Sets dateFounded
     *
     * @param \DateTime $dateFounded date_founded string
     *
     * @return $this
     */
    public function setDateFounded($dateFounded)
    {
        $this->container['dateFounded'] = $dateFounded;

        return $this;
    }

    /**
     * Gets creatorId
     *
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creatorId'];
    }

    /**
     * Sets creatorId
     *
     * @param int $creatorId creator_id integer
     *
     * @return $this
     */
    public function setCreatorId($creatorId)
    {
        $this->container['creatorId'] = $creatorId;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url string
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets factionId
     *
     * @return int
     */
    public function getFactionId()
    {
        return $this->container['factionId'];
    }

    /**
     * Sets factionId
     *
     * @param int $factionId faction_id integer
     *
     * @return $this
     */
    public function setFactionId($factionId)
    {
        $this->container['factionId'] = $factionId;

        return $this;
    }

    /**
     * Gets homeStationId
     *
     * @return int
     */
    public function getHomeStationId()
    {
        return $this->container['homeStationId'];
    }

    /**
     * Sets homeStationId
     *
     * @param int $homeStationId home_station_id integer
     *
     * @return $this
     */
    public function setHomeStationId($homeStationId)
    {
        $this->container['homeStationId'] = $homeStationId;

        return $this;
    }

    /**
     * Gets shares
     *
     * @return int
     */
    public function getShares()
    {
        return $this->container['shares'];
    }

    /**
     * Sets shares
     *
     * @param int $shares shares integer
     *
     * @return $this
     */
    public function setShares($shares)
    {
        $this->container['shares'] = $shares;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


