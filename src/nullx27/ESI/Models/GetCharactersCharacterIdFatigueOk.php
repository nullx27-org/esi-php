<?php
/**
 * GetCharactersCharacterIdFatigueOk
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetCharactersCharacterIdFatigueOk Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetCharactersCharacterIdFatigueOk implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_characters_character_id_fatigue_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lastJumpDate' => '\DateTime',
        'jumpFatigueExpireDate' => '\DateTime',
        'lastUpdateDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lastJumpDate' => 'date-time',
        'jumpFatigueExpireDate' => 'date-time',
        'lastUpdateDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lastJumpDate' => 'last_jump_date',
        'jumpFatigueExpireDate' => 'jump_fatigue_expire_date',
        'lastUpdateDate' => 'last_update_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lastJumpDate' => 'setLastJumpDate',
        'jumpFatigueExpireDate' => 'setJumpFatigueExpireDate',
        'lastUpdateDate' => 'setLastUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lastJumpDate' => 'getLastJumpDate',
        'jumpFatigueExpireDate' => 'getJumpFatigueExpireDate',
        'lastUpdateDate' => 'getLastUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lastJumpDate'] = isset($data['lastJumpDate']) ? $data['lastJumpDate'] : null;
        $this->container['jumpFatigueExpireDate'] = isset($data['jumpFatigueExpireDate']) ? $data['jumpFatigueExpireDate'] : null;
        $this->container['lastUpdateDate'] = isset($data['lastUpdateDate']) ? $data['lastUpdateDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets lastJumpDate
     *
     * @return \DateTime
     */
    public function getLastJumpDate()
    {
        return $this->container['lastJumpDate'];
    }

    /**
     * Sets lastJumpDate
     *
     * @param \DateTime $lastJumpDate Character's last jump activation
     *
     * @return $this
     */
    public function setLastJumpDate($lastJumpDate)
    {
        $this->container['lastJumpDate'] = $lastJumpDate;

        return $this;
    }

    /**
     * Gets jumpFatigueExpireDate
     *
     * @return \DateTime
     */
    public function getJumpFatigueExpireDate()
    {
        return $this->container['jumpFatigueExpireDate'];
    }

    /**
     * Sets jumpFatigueExpireDate
     *
     * @param \DateTime $jumpFatigueExpireDate Character's jump fatigue expiry
     *
     * @return $this
     */
    public function setJumpFatigueExpireDate($jumpFatigueExpireDate)
    {
        $this->container['jumpFatigueExpireDate'] = $jumpFatigueExpireDate;

        return $this;
    }

    /**
     * Gets lastUpdateDate
     *
     * @return \DateTime
     */
    public function getLastUpdateDate()
    {
        return $this->container['lastUpdateDate'];
    }

    /**
     * Sets lastUpdateDate
     *
     * @param \DateTime $lastUpdateDate Character's last jump update
     *
     * @return $this
     */
    public function setLastUpdateDate($lastUpdateDate)
    {
        $this->container['lastUpdateDate'] = $lastUpdateDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


