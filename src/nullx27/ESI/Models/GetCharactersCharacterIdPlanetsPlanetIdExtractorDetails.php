<?php
/**
 * GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails Class Doc Comment
 *
 * @category Class
 * @description extractor_details object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_characters_character_id_planets_planet_id_extractor_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'heads' => '\nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdPlanetsPlanetIdHead[]',
        'productTypeId' => 'int',
        'cycleTime' => 'int',
        'headRadius' => 'float',
        'qtyPerCycle' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'heads' => null,
        'productTypeId' => 'int32',
        'cycleTime' => 'int32',
        'headRadius' => 'float',
        'qtyPerCycle' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'heads' => 'heads',
        'productTypeId' => 'product_type_id',
        'cycleTime' => 'cycle_time',
        'headRadius' => 'head_radius',
        'qtyPerCycle' => 'qty_per_cycle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'heads' => 'setHeads',
        'productTypeId' => 'setProductTypeId',
        'cycleTime' => 'setCycleTime',
        'headRadius' => 'setHeadRadius',
        'qtyPerCycle' => 'setQtyPerCycle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'heads' => 'getHeads',
        'productTypeId' => 'getProductTypeId',
        'cycleTime' => 'getCycleTime',
        'headRadius' => 'getHeadRadius',
        'qtyPerCycle' => 'getQtyPerCycle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['heads'] = isset($data['heads']) ? $data['heads'] : null;
        $this->container['productTypeId'] = isset($data['productTypeId']) ? $data['productTypeId'] : null;
        $this->container['cycleTime'] = isset($data['cycleTime']) ? $data['cycleTime'] : null;
        $this->container['headRadius'] = isset($data['headRadius']) ? $data['headRadius'] : null;
        $this->container['qtyPerCycle'] = isset($data['qtyPerCycle']) ? $data['qtyPerCycle'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['heads'] === null) {
            $invalidProperties[] = "'heads' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['heads'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets heads
     *
     * @return \nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdPlanetsPlanetIdHead[]
     */
    public function getHeads()
    {
        return $this->container['heads'];
    }

    /**
     * Sets heads
     *
     * @param \nullx27\ESI\nullx27\ESI\Models\GetCharactersCharacterIdPlanetsPlanetIdHead[] $heads heads array
     *
     * @return $this
     */
    public function setHeads($heads)
    {
        $this->container['heads'] = $heads;

        return $this;
    }

    /**
     * Gets productTypeId
     *
     * @return int
     */
    public function getProductTypeId()
    {
        return $this->container['productTypeId'];
    }

    /**
     * Sets productTypeId
     *
     * @param int $productTypeId product_type_id integer
     *
     * @return $this
     */
    public function setProductTypeId($productTypeId)
    {
        $this->container['productTypeId'] = $productTypeId;

        return $this;
    }

    /**
     * Gets cycleTime
     *
     * @return int
     */
    public function getCycleTime()
    {
        return $this->container['cycleTime'];
    }

    /**
     * Sets cycleTime
     *
     * @param int $cycleTime in seconds
     *
     * @return $this
     */
    public function setCycleTime($cycleTime)
    {
        $this->container['cycleTime'] = $cycleTime;

        return $this;
    }

    /**
     * Gets headRadius
     *
     * @return float
     */
    public function getHeadRadius()
    {
        return $this->container['headRadius'];
    }

    /**
     * Sets headRadius
     *
     * @param float $headRadius head_radius number
     *
     * @return $this
     */
    public function setHeadRadius($headRadius)
    {
        $this->container['headRadius'] = $headRadius;

        return $this;
    }

    /**
     * Gets qtyPerCycle
     *
     * @return int
     */
    public function getQtyPerCycle()
    {
        return $this->container['qtyPerCycle'];
    }

    /**
     * Sets qtyPerCycle
     *
     * @param int $qtyPerCycle qty_per_cycle integer
     *
     * @return $this
     */
    public function setQtyPerCycle($qtyPerCycle)
    {
        $this->container['qtyPerCycle'] = $qtyPerCycle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


