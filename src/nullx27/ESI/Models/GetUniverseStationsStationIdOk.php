<?php
/**
 * GetUniverseStationsStationIdOk
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetUniverseStationsStationIdOk Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetUniverseStationsStationIdOk implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_universe_stations_station_id_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stationId' => 'int',
        'name' => 'string',
        'owner' => 'int',
        'typeId' => 'int',
        'raceId' => 'int',
        'position' => '\nullx27\ESI\nullx27\ESI\Models\GetUniverseStationsStationIdPosition',
        'systemId' => 'int',
        'reprocessingEfficiency' => 'float',
        'reprocessingStationsTake' => 'float',
        'maxDockableShipVolume' => 'float',
        'officeRentalCost' => 'float',
        'services' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stationId' => 'int32',
        'name' => null,
        'owner' => 'int32',
        'typeId' => 'int32',
        'raceId' => 'int32',
        'position' => null,
        'systemId' => 'int32',
        'reprocessingEfficiency' => 'float',
        'reprocessingStationsTake' => 'float',
        'maxDockableShipVolume' => 'float',
        'officeRentalCost' => 'float',
        'services' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stationId' => 'station_id',
        'name' => 'name',
        'owner' => 'owner',
        'typeId' => 'type_id',
        'raceId' => 'race_id',
        'position' => 'position',
        'systemId' => 'system_id',
        'reprocessingEfficiency' => 'reprocessing_efficiency',
        'reprocessingStationsTake' => 'reprocessing_stations_take',
        'maxDockableShipVolume' => 'max_dockable_ship_volume',
        'officeRentalCost' => 'office_rental_cost',
        'services' => 'services'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stationId' => 'setStationId',
        'name' => 'setName',
        'owner' => 'setOwner',
        'typeId' => 'setTypeId',
        'raceId' => 'setRaceId',
        'position' => 'setPosition',
        'systemId' => 'setSystemId',
        'reprocessingEfficiency' => 'setReprocessingEfficiency',
        'reprocessingStationsTake' => 'setReprocessingStationsTake',
        'maxDockableShipVolume' => 'setMaxDockableShipVolume',
        'officeRentalCost' => 'setOfficeRentalCost',
        'services' => 'setServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stationId' => 'getStationId',
        'name' => 'getName',
        'owner' => 'getOwner',
        'typeId' => 'getTypeId',
        'raceId' => 'getRaceId',
        'position' => 'getPosition',
        'systemId' => 'getSystemId',
        'reprocessingEfficiency' => 'getReprocessingEfficiency',
        'reprocessingStationsTake' => 'getReprocessingStationsTake',
        'maxDockableShipVolume' => 'getMaxDockableShipVolume',
        'officeRentalCost' => 'getOfficeRentalCost',
        'services' => 'getServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SERVICES_BOUNTY_MISSIONS = 'bounty-missions';
    const SERVICES_ASSASINATION_MISSIONS = 'assasination-missions';
    const SERVICES_COURIER_MISSIONS = 'courier-missions';
    const SERVICES_INTERBUS = 'interbus';
    const SERVICES_REPROCESSING_PLANT = 'reprocessing-plant';
    const SERVICES_REFINERY = 'refinery';
    const SERVICES_MARKET = 'market';
    const SERVICES_BLACK_MARKET = 'black-market';
    const SERVICES_STOCK_EXCHANGE = 'stock-exchange';
    const SERVICES_CLONING = 'cloning';
    const SERVICES_SURGERY = 'surgery';
    const SERVICES_DNA_THERAPY = 'dna-therapy';
    const SERVICES_REPAIR_FACILITIES = 'repair-facilities';
    const SERVICES_FACTORY = 'factory';
    const SERVICES_LABRATORY = 'labratory';
    const SERVICES_GAMBLING = 'gambling';
    const SERVICES_FITTING = 'fitting';
    const SERVICES_PAINTSHOP = 'paintshop';
    const SERVICES_NEWS = 'news';
    const SERVICES_STORAGE = 'storage';
    const SERVICES_INSURANCE = 'insurance';
    const SERVICES_DOCKING = 'docking';
    const SERVICES_OFFICE_RENTAL = 'office-rental';
    const SERVICES_JUMP_CLONE_FACILITY = 'jump-clone-facility';
    const SERVICES_LOYALTY_POINT_STORE = 'loyalty-point-store';
    const SERVICES_NAVY_OFFICES = 'navy-offices';
    const SERVICES_SECURITY_OFFICES = 'security-offices';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServicesAllowableValues()
    {
        return [
            self::SERVICES_BOUNTY_MISSIONS,
            self::SERVICES_ASSASINATION_MISSIONS,
            self::SERVICES_COURIER_MISSIONS,
            self::SERVICES_INTERBUS,
            self::SERVICES_REPROCESSING_PLANT,
            self::SERVICES_REFINERY,
            self::SERVICES_MARKET,
            self::SERVICES_BLACK_MARKET,
            self::SERVICES_STOCK_EXCHANGE,
            self::SERVICES_CLONING,
            self::SERVICES_SURGERY,
            self::SERVICES_DNA_THERAPY,
            self::SERVICES_REPAIR_FACILITIES,
            self::SERVICES_FACTORY,
            self::SERVICES_LABRATORY,
            self::SERVICES_GAMBLING,
            self::SERVICES_FITTING,
            self::SERVICES_PAINTSHOP,
            self::SERVICES_NEWS,
            self::SERVICES_STORAGE,
            self::SERVICES_INSURANCE,
            self::SERVICES_DOCKING,
            self::SERVICES_OFFICE_RENTAL,
            self::SERVICES_JUMP_CLONE_FACILITY,
            self::SERVICES_LOYALTY_POINT_STORE,
            self::SERVICES_NAVY_OFFICES,
            self::SERVICES_SECURITY_OFFICES,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stationId'] = isset($data['stationId']) ? $data['stationId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['typeId'] = isset($data['typeId']) ? $data['typeId'] : null;
        $this->container['raceId'] = isset($data['raceId']) ? $data['raceId'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['systemId'] = isset($data['systemId']) ? $data['systemId'] : null;
        $this->container['reprocessingEfficiency'] = isset($data['reprocessingEfficiency']) ? $data['reprocessingEfficiency'] : null;
        $this->container['reprocessingStationsTake'] = isset($data['reprocessingStationsTake']) ? $data['reprocessingStationsTake'] : null;
        $this->container['maxDockableShipVolume'] = isset($data['maxDockableShipVolume']) ? $data['maxDockableShipVolume'] : null;
        $this->container['officeRentalCost'] = isset($data['officeRentalCost']) ? $data['officeRentalCost'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['stationId'] === null) {
            $invalidProperties[] = "'stationId' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['typeId'] === null) {
            $invalidProperties[] = "'typeId' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['systemId'] === null) {
            $invalidProperties[] = "'systemId' can't be null";
        }
        if ($this->container['reprocessingEfficiency'] === null) {
            $invalidProperties[] = "'reprocessingEfficiency' can't be null";
        }
        if ($this->container['reprocessingStationsTake'] === null) {
            $invalidProperties[] = "'reprocessingStationsTake' can't be null";
        }
        if ($this->container['maxDockableShipVolume'] === null) {
            $invalidProperties[] = "'maxDockableShipVolume' can't be null";
        }
        if ($this->container['officeRentalCost'] === null) {
            $invalidProperties[] = "'officeRentalCost' can't be null";
        }
        if ($this->container['services'] === null) {
            $invalidProperties[] = "'services' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['stationId'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['typeId'] === null) {
            return false;
        }
        if ($this->container['position'] === null) {
            return false;
        }
        if ($this->container['systemId'] === null) {
            return false;
        }
        if ($this->container['reprocessingEfficiency'] === null) {
            return false;
        }
        if ($this->container['reprocessingStationsTake'] === null) {
            return false;
        }
        if ($this->container['maxDockableShipVolume'] === null) {
            return false;
        }
        if ($this->container['officeRentalCost'] === null) {
            return false;
        }
        if ($this->container['services'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets stationId
     *
     * @return int
     */
    public function getStationId()
    {
        return $this->container['stationId'];
    }

    /**
     * Sets stationId
     *
     * @param int $stationId station_id integer
     *
     * @return $this
     */
    public function setStationId($stationId)
    {
        $this->container['stationId'] = $stationId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name string
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return int
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param int $owner ID of the corporation that controls this station
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets typeId
     *
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     *
     * @param int $typeId type_id integer
     *
     * @return $this
     */
    public function setTypeId($typeId)
    {
        $this->container['typeId'] = $typeId;

        return $this;
    }

    /**
     * Gets raceId
     *
     * @return int
     */
    public function getRaceId()
    {
        return $this->container['raceId'];
    }

    /**
     * Sets raceId
     *
     * @param int $raceId race_id integer
     *
     * @return $this
     */
    public function setRaceId($raceId)
    {
        $this->container['raceId'] = $raceId;

        return $this;
    }

    /**
     * Gets position
     *
     * @return \nullx27\ESI\nullx27\ESI\Models\GetUniverseStationsStationIdPosition
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param \nullx27\ESI\nullx27\ESI\Models\GetUniverseStationsStationIdPosition $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets systemId
     *
     * @return int
     */
    public function getSystemId()
    {
        return $this->container['systemId'];
    }

    /**
     * Sets systemId
     *
     * @param int $systemId The solar system this station is in
     *
     * @return $this
     */
    public function setSystemId($systemId)
    {
        $this->container['systemId'] = $systemId;

        return $this;
    }

    /**
     * Gets reprocessingEfficiency
     *
     * @return float
     */
    public function getReprocessingEfficiency()
    {
        return $this->container['reprocessingEfficiency'];
    }

    /**
     * Sets reprocessingEfficiency
     *
     * @param float $reprocessingEfficiency reprocessing_efficiency number
     *
     * @return $this
     */
    public function setReprocessingEfficiency($reprocessingEfficiency)
    {
        $this->container['reprocessingEfficiency'] = $reprocessingEfficiency;

        return $this;
    }

    /**
     * Gets reprocessingStationsTake
     *
     * @return float
     */
    public function getReprocessingStationsTake()
    {
        return $this->container['reprocessingStationsTake'];
    }

    /**
     * Sets reprocessingStationsTake
     *
     * @param float $reprocessingStationsTake reprocessing_stations_take number
     *
     * @return $this
     */
    public function setReprocessingStationsTake($reprocessingStationsTake)
    {
        $this->container['reprocessingStationsTake'] = $reprocessingStationsTake;

        return $this;
    }

    /**
     * Gets maxDockableShipVolume
     *
     * @return float
     */
    public function getMaxDockableShipVolume()
    {
        return $this->container['maxDockableShipVolume'];
    }

    /**
     * Sets maxDockableShipVolume
     *
     * @param float $maxDockableShipVolume max_dockable_ship_volume number
     *
     * @return $this
     */
    public function setMaxDockableShipVolume($maxDockableShipVolume)
    {
        $this->container['maxDockableShipVolume'] = $maxDockableShipVolume;

        return $this;
    }

    /**
     * Gets officeRentalCost
     *
     * @return float
     */
    public function getOfficeRentalCost()
    {
        return $this->container['officeRentalCost'];
    }

    /**
     * Sets officeRentalCost
     *
     * @param float $officeRentalCost office_rental_cost number
     *
     * @return $this
     */
    public function setOfficeRentalCost($officeRentalCost)
    {
        $this->container['officeRentalCost'] = $officeRentalCost;

        return $this;
    }

    /**
     * Gets services
     *
     * @return string[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param string[] $services services array
     *
     * @return $this
     */
    public function setServices($services)
    {
        $allowedValues = $this->getServicesAllowableValues();
        if (array_diff($services, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'services', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['services'] = $services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


