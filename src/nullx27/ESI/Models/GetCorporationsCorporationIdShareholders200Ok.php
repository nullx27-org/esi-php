<?php
/**
 * GetCorporationsCorporationIdShareholders200Ok
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetCorporationsCorporationIdShareholders200Ok Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetCorporationsCorporationIdShareholders200Ok implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_corporations_corporation_id_shareholders_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shareholderId' => 'int',
        'shareholderType' => 'string',
        'shareCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shareholderId' => 'int32',
        'shareholderType' => null,
        'shareCount' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shareholderId' => 'shareholder_id',
        'shareholderType' => 'shareholder_type',
        'shareCount' => 'share_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shareholderId' => 'setShareholderId',
        'shareholderType' => 'setShareholderType',
        'shareCount' => 'setShareCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shareholderId' => 'getShareholderId',
        'shareholderType' => 'getShareholderType',
        'shareCount' => 'getShareCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHAREHOLDER_TYPE_CHARACTER = 'character';
    const SHAREHOLDER_TYPE_CORPORATION = 'corporation';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShareholderTypeAllowableValues()
    {
        return [
            self::SHAREHOLDER_TYPE_CHARACTER,
            self::SHAREHOLDER_TYPE_CORPORATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shareholderId'] = isset($data['shareholderId']) ? $data['shareholderId'] : null;
        $this->container['shareholderType'] = isset($data['shareholderType']) ? $data['shareholderType'] : null;
        $this->container['shareCount'] = isset($data['shareCount']) ? $data['shareCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shareholderId'] === null) {
            $invalidProperties[] = "'shareholderId' can't be null";
        }
        if ($this->container['shareholderType'] === null) {
            $invalidProperties[] = "'shareholderType' can't be null";
        }
        $allowedValues = $this->getShareholderTypeAllowableValues();
        if (!in_array($this->container['shareholderType'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shareholderType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['shareCount'] === null) {
            $invalidProperties[] = "'shareCount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['shareholderId'] === null) {
            return false;
        }
        if ($this->container['shareholderType'] === null) {
            return false;
        }
        $allowedValues = $this->getShareholderTypeAllowableValues();
        if (!in_array($this->container['shareholderType'], $allowedValues)) {
            return false;
        }
        if ($this->container['shareCount'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets shareholderId
     *
     * @return int
     */
    public function getShareholderId()
    {
        return $this->container['shareholderId'];
    }

    /**
     * Sets shareholderId
     *
     * @param int $shareholderId shareholder_id integer
     *
     * @return $this
     */
    public function setShareholderId($shareholderId)
    {
        $this->container['shareholderId'] = $shareholderId;

        return $this;
    }

    /**
     * Gets shareholderType
     *
     * @return string
     */
    public function getShareholderType()
    {
        return $this->container['shareholderType'];
    }

    /**
     * Sets shareholderType
     *
     * @param string $shareholderType shareholder_type string
     *
     * @return $this
     */
    public function setShareholderType($shareholderType)
    {
        $allowedValues = $this->getShareholderTypeAllowableValues();
        if (!in_array($shareholderType, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shareholderType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shareholderType'] = $shareholderType;

        return $this;
    }

    /**
     * Gets shareCount
     *
     * @return int
     */
    public function getShareCount()
    {
        return $this->container['shareCount'];
    }

    /**
     * Sets shareCount
     *
     * @param int $shareCount share_count integer
     *
     * @return $this
     */
    public function setShareCount($shareCount)
    {
        $this->container['shareCount'] = $shareCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


