<?php
/**
 * GetAlliancesAllianceIdOk
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetAlliancesAllianceIdOk Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetAlliancesAllianceIdOk implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_alliances_alliance_id_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'creatorId' => 'int',
        'creatorCorporationId' => 'int',
        'ticker' => 'string',
        'executorCorporationId' => 'int',
        'dateFounded' => '\DateTime',
        'factionId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'creatorId' => 'int32',
        'creatorCorporationId' => 'int32',
        'ticker' => null,
        'executorCorporationId' => 'int32',
        'dateFounded' => 'date-time',
        'factionId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'creatorId' => 'creator_id',
        'creatorCorporationId' => 'creator_corporation_id',
        'ticker' => 'ticker',
        'executorCorporationId' => 'executor_corporation_id',
        'dateFounded' => 'date_founded',
        'factionId' => 'faction_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'creatorId' => 'setCreatorId',
        'creatorCorporationId' => 'setCreatorCorporationId',
        'ticker' => 'setTicker',
        'executorCorporationId' => 'setExecutorCorporationId',
        'dateFounded' => 'setDateFounded',
        'factionId' => 'setFactionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'creatorId' => 'getCreatorId',
        'creatorCorporationId' => 'getCreatorCorporationId',
        'ticker' => 'getTicker',
        'executorCorporationId' => 'getExecutorCorporationId',
        'dateFounded' => 'getDateFounded',
        'factionId' => 'getFactionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['creatorId'] = isset($data['creatorId']) ? $data['creatorId'] : null;
        $this->container['creatorCorporationId'] = isset($data['creatorCorporationId']) ? $data['creatorCorporationId'] : null;
        $this->container['ticker'] = isset($data['ticker']) ? $data['ticker'] : null;
        $this->container['executorCorporationId'] = isset($data['executorCorporationId']) ? $data['executorCorporationId'] : null;
        $this->container['dateFounded'] = isset($data['dateFounded']) ? $data['dateFounded'] : null;
        $this->container['factionId'] = isset($data['factionId']) ? $data['factionId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['creatorId'] === null) {
            $invalidProperties[] = "'creatorId' can't be null";
        }
        if ($this->container['creatorCorporationId'] === null) {
            $invalidProperties[] = "'creatorCorporationId' can't be null";
        }
        if ($this->container['ticker'] === null) {
            $invalidProperties[] = "'ticker' can't be null";
        }
        if ($this->container['dateFounded'] === null) {
            $invalidProperties[] = "'dateFounded' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['creatorId'] === null) {
            return false;
        }
        if ($this->container['creatorCorporationId'] === null) {
            return false;
        }
        if ($this->container['ticker'] === null) {
            return false;
        }
        if ($this->container['dateFounded'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name the full name of the alliance
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets creatorId
     *
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creatorId'];
    }

    /**
     * Sets creatorId
     *
     * @param int $creatorId ID of the character that created the alliance
     *
     * @return $this
     */
    public function setCreatorId($creatorId)
    {
        $this->container['creatorId'] = $creatorId;

        return $this;
    }

    /**
     * Gets creatorCorporationId
     *
     * @return int
     */
    public function getCreatorCorporationId()
    {
        return $this->container['creatorCorporationId'];
    }

    /**
     * Sets creatorCorporationId
     *
     * @param int $creatorCorporationId ID of the corporation that created the alliance
     *
     * @return $this
     */
    public function setCreatorCorporationId($creatorCorporationId)
    {
        $this->container['creatorCorporationId'] = $creatorCorporationId;

        return $this;
    }

    /**
     * Gets ticker
     *
     * @return string
     */
    public function getTicker()
    {
        return $this->container['ticker'];
    }

    /**
     * Sets ticker
     *
     * @param string $ticker the short name of the alliance
     *
     * @return $this
     */
    public function setTicker($ticker)
    {
        $this->container['ticker'] = $ticker;

        return $this;
    }

    /**
     * Gets executorCorporationId
     *
     * @return int
     */
    public function getExecutorCorporationId()
    {
        return $this->container['executorCorporationId'];
    }

    /**
     * Sets executorCorporationId
     *
     * @param int $executorCorporationId the executor corporation ID, if this alliance is not closed
     *
     * @return $this
     */
    public function setExecutorCorporationId($executorCorporationId)
    {
        $this->container['executorCorporationId'] = $executorCorporationId;

        return $this;
    }

    /**
     * Gets dateFounded
     *
     * @return \DateTime
     */
    public function getDateFounded()
    {
        return $this->container['dateFounded'];
    }

    /**
     * Sets dateFounded
     *
     * @param \DateTime $dateFounded date_founded string
     *
     * @return $this
     */
    public function setDateFounded($dateFounded)
    {
        $this->container['dateFounded'] = $dateFounded;

        return $this;
    }

    /**
     * Gets factionId
     *
     * @return int
     */
    public function getFactionId()
    {
        return $this->container['factionId'];
    }

    /**
     * Sets factionId
     *
     * @param int $factionId Faction ID this alliance is fighting for, if this alliance is enlisted in factional warfare
     *
     * @return $this
     */
    public function setFactionId($factionId)
    {
        $this->container['factionId'] = $factionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


