<?php
/**
 * GetCorporationsCorporationIdStarbases200Ok
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetCorporationsCorporationIdStarbases200Ok Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetCorporationsCorporationIdStarbases200Ok implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_corporations_corporation_id_starbases_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'starbaseId' => 'int',
        'typeId' => 'int',
        'systemId' => 'int',
        'moonId' => 'int',
        'state' => 'string',
        'unanchorAt' => '\DateTime',
        'reinforcedUntil' => '\DateTime',
        'onlinedSince' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'starbaseId' => 'int64',
        'typeId' => 'int32',
        'systemId' => 'int32',
        'moonId' => 'int32',
        'state' => null,
        'unanchorAt' => 'date-time',
        'reinforcedUntil' => 'date-time',
        'onlinedSince' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'starbaseId' => 'starbase_id',
        'typeId' => 'type_id',
        'systemId' => 'system_id',
        'moonId' => 'moon_id',
        'state' => 'state',
        'unanchorAt' => 'unanchor_at',
        'reinforcedUntil' => 'reinforced_until',
        'onlinedSince' => 'onlined_since'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'starbaseId' => 'setStarbaseId',
        'typeId' => 'setTypeId',
        'systemId' => 'setSystemId',
        'moonId' => 'setMoonId',
        'state' => 'setState',
        'unanchorAt' => 'setUnanchorAt',
        'reinforcedUntil' => 'setReinforcedUntil',
        'onlinedSince' => 'setOnlinedSince'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'starbaseId' => 'getStarbaseId',
        'typeId' => 'getTypeId',
        'systemId' => 'getSystemId',
        'moonId' => 'getMoonId',
        'state' => 'getState',
        'unanchorAt' => 'getUnanchorAt',
        'reinforcedUntil' => 'getReinforcedUntil',
        'onlinedSince' => 'getOnlinedSince'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_OFFLINE = 'offline';
    const STATE_ONLINE = 'online';
    const STATE_ONLINING = 'onlining';
    const STATE_REINFORCED = 'reinforced';
    const STATE_UNANCHORING = 'unanchoring';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_OFFLINE,
            self::STATE_ONLINE,
            self::STATE_ONLINING,
            self::STATE_REINFORCED,
            self::STATE_UNANCHORING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['starbaseId'] = isset($data['starbaseId']) ? $data['starbaseId'] : null;
        $this->container['typeId'] = isset($data['typeId']) ? $data['typeId'] : null;
        $this->container['systemId'] = isset($data['systemId']) ? $data['systemId'] : null;
        $this->container['moonId'] = isset($data['moonId']) ? $data['moonId'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['unanchorAt'] = isset($data['unanchorAt']) ? $data['unanchorAt'] : null;
        $this->container['reinforcedUntil'] = isset($data['reinforcedUntil']) ? $data['reinforcedUntil'] : null;
        $this->container['onlinedSince'] = isset($data['onlinedSince']) ? $data['onlinedSince'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['starbaseId'] === null) {
            $invalidProperties[] = "'starbaseId' can't be null";
        }
        if ($this->container['typeId'] === null) {
            $invalidProperties[] = "'typeId' can't be null";
        }
        if ($this->container['systemId'] === null) {
            $invalidProperties[] = "'systemId' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['starbaseId'] === null) {
            return false;
        }
        if ($this->container['typeId'] === null) {
            return false;
        }
        if ($this->container['systemId'] === null) {
            return false;
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets starbaseId
     *
     * @return int
     */
    public function getStarbaseId()
    {
        return $this->container['starbaseId'];
    }

    /**
     * Sets starbaseId
     *
     * @param int $starbaseId Unique ID for this starbase (POS)
     *
     * @return $this
     */
    public function setStarbaseId($starbaseId)
    {
        $this->container['starbaseId'] = $starbaseId;

        return $this;
    }

    /**
     * Gets typeId
     *
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     *
     * @param int $typeId Starbase (POS) type
     *
     * @return $this
     */
    public function setTypeId($typeId)
    {
        $this->container['typeId'] = $typeId;

        return $this;
    }

    /**
     * Gets systemId
     *
     * @return int
     */
    public function getSystemId()
    {
        return $this->container['systemId'];
    }

    /**
     * Sets systemId
     *
     * @param int $systemId The solar system this starbase (POS) is in, unanchored POSes have this information
     *
     * @return $this
     */
    public function setSystemId($systemId)
    {
        $this->container['systemId'] = $systemId;

        return $this;
    }

    /**
     * Gets moonId
     *
     * @return int
     */
    public function getMoonId()
    {
        return $this->container['moonId'];
    }

    /**
     * Sets moonId
     *
     * @param int $moonId The moon this starbase (POS) is anchored on, unanchored POSes do not have this information
     *
     * @return $this
     */
    public function setMoonId($moonId)
    {
        $this->container['moonId'] = $moonId;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state string
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets unanchorAt
     *
     * @return \DateTime
     */
    public function getUnanchorAt()
    {
        return $this->container['unanchorAt'];
    }

    /**
     * Sets unanchorAt
     *
     * @param \DateTime $unanchorAt When the POS started unanchoring, for starbases (POSes) in unanchoring state
     *
     * @return $this
     */
    public function setUnanchorAt($unanchorAt)
    {
        $this->container['unanchorAt'] = $unanchorAt;

        return $this;
    }

    /**
     * Gets reinforcedUntil
     *
     * @return \DateTime
     */
    public function getReinforcedUntil()
    {
        return $this->container['reinforcedUntil'];
    }

    /**
     * Sets reinforcedUntil
     *
     * @param \DateTime $reinforcedUntil When the POS will be out of reinforcement, for starbases (POSes) in reinforced state
     *
     * @return $this
     */
    public function setReinforcedUntil($reinforcedUntil)
    {
        $this->container['reinforcedUntil'] = $reinforcedUntil;

        return $this;
    }

    /**
     * Gets onlinedSince
     *
     * @return \DateTime
     */
    public function getOnlinedSince()
    {
        return $this->container['onlinedSince'];
    }

    /**
     * Sets onlinedSince
     *
     * @param \DateTime $onlinedSince When the POS onlined, for starbases (POSes) in online state
     *
     * @return $this
     */
    public function setOnlinedSince($onlinedSince)
    {
        $this->container['onlinedSince'] = $onlinedSince;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


