<?php
/**
 * GetUniverseFactions200Ok
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetUniverseFactions200Ok Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetUniverseFactions200Ok implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_universe_factions_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'factionId' => 'int',
        'name' => 'string',
        'description' => 'string',
        'solarSystemId' => 'int',
        'corporationId' => 'int',
        'militiaCorporationId' => 'int',
        'sizeFactor' => 'float',
        'stationCount' => 'int',
        'stationSystemCount' => 'int',
        'isUnique' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'factionId' => 'int32',
        'name' => null,
        'description' => null,
        'solarSystemId' => 'int32',
        'corporationId' => 'int32',
        'militiaCorporationId' => 'int32',
        'sizeFactor' => 'float',
        'stationCount' => 'int32',
        'stationSystemCount' => 'int32',
        'isUnique' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'factionId' => 'faction_id',
        'name' => 'name',
        'description' => 'description',
        'solarSystemId' => 'solar_system_id',
        'corporationId' => 'corporation_id',
        'militiaCorporationId' => 'militia_corporation_id',
        'sizeFactor' => 'size_factor',
        'stationCount' => 'station_count',
        'stationSystemCount' => 'station_system_count',
        'isUnique' => 'is_unique'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'factionId' => 'setFactionId',
        'name' => 'setName',
        'description' => 'setDescription',
        'solarSystemId' => 'setSolarSystemId',
        'corporationId' => 'setCorporationId',
        'militiaCorporationId' => 'setMilitiaCorporationId',
        'sizeFactor' => 'setSizeFactor',
        'stationCount' => 'setStationCount',
        'stationSystemCount' => 'setStationSystemCount',
        'isUnique' => 'setIsUnique'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'factionId' => 'getFactionId',
        'name' => 'getName',
        'description' => 'getDescription',
        'solarSystemId' => 'getSolarSystemId',
        'corporationId' => 'getCorporationId',
        'militiaCorporationId' => 'getMilitiaCorporationId',
        'sizeFactor' => 'getSizeFactor',
        'stationCount' => 'getStationCount',
        'stationSystemCount' => 'getStationSystemCount',
        'isUnique' => 'getIsUnique'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['factionId'] = isset($data['factionId']) ? $data['factionId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['solarSystemId'] = isset($data['solarSystemId']) ? $data['solarSystemId'] : null;
        $this->container['corporationId'] = isset($data['corporationId']) ? $data['corporationId'] : null;
        $this->container['militiaCorporationId'] = isset($data['militiaCorporationId']) ? $data['militiaCorporationId'] : null;
        $this->container['sizeFactor'] = isset($data['sizeFactor']) ? $data['sizeFactor'] : null;
        $this->container['stationCount'] = isset($data['stationCount']) ? $data['stationCount'] : null;
        $this->container['stationSystemCount'] = isset($data['stationSystemCount']) ? $data['stationSystemCount'] : null;
        $this->container['isUnique'] = isset($data['isUnique']) ? $data['isUnique'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['factionId'] === null) {
            $invalidProperties[] = "'factionId' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['sizeFactor'] === null) {
            $invalidProperties[] = "'sizeFactor' can't be null";
        }
        if ($this->container['stationCount'] === null) {
            $invalidProperties[] = "'stationCount' can't be null";
        }
        if ($this->container['stationSystemCount'] === null) {
            $invalidProperties[] = "'stationSystemCount' can't be null";
        }
        if ($this->container['isUnique'] === null) {
            $invalidProperties[] = "'isUnique' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['factionId'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['sizeFactor'] === null) {
            return false;
        }
        if ($this->container['stationCount'] === null) {
            return false;
        }
        if ($this->container['stationSystemCount'] === null) {
            return false;
        }
        if ($this->container['isUnique'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets factionId
     *
     * @return int
     */
    public function getFactionId()
    {
        return $this->container['factionId'];
    }

    /**
     * Sets factionId
     *
     * @param int $factionId faction_id integer
     *
     * @return $this
     */
    public function setFactionId($factionId)
    {
        $this->container['factionId'] = $factionId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name string
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description string
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets solarSystemId
     *
     * @return int
     */
    public function getSolarSystemId()
    {
        return $this->container['solarSystemId'];
    }

    /**
     * Sets solarSystemId
     *
     * @param int $solarSystemId solar_system_id integer
     *
     * @return $this
     */
    public function setSolarSystemId($solarSystemId)
    {
        $this->container['solarSystemId'] = $solarSystemId;

        return $this;
    }

    /**
     * Gets corporationId
     *
     * @return int
     */
    public function getCorporationId()
    {
        return $this->container['corporationId'];
    }

    /**
     * Sets corporationId
     *
     * @param int $corporationId corporation_id integer
     *
     * @return $this
     */
    public function setCorporationId($corporationId)
    {
        $this->container['corporationId'] = $corporationId;

        return $this;
    }

    /**
     * Gets militiaCorporationId
     *
     * @return int
     */
    public function getMilitiaCorporationId()
    {
        return $this->container['militiaCorporationId'];
    }

    /**
     * Sets militiaCorporationId
     *
     * @param int $militiaCorporationId militia_corporation_id integer
     *
     * @return $this
     */
    public function setMilitiaCorporationId($militiaCorporationId)
    {
        $this->container['militiaCorporationId'] = $militiaCorporationId;

        return $this;
    }

    /**
     * Gets sizeFactor
     *
     * @return float
     */
    public function getSizeFactor()
    {
        return $this->container['sizeFactor'];
    }

    /**
     * Sets sizeFactor
     *
     * @param float $sizeFactor size_factor number
     *
     * @return $this
     */
    public function setSizeFactor($sizeFactor)
    {
        $this->container['sizeFactor'] = $sizeFactor;

        return $this;
    }

    /**
     * Gets stationCount
     *
     * @return int
     */
    public function getStationCount()
    {
        return $this->container['stationCount'];
    }

    /**
     * Sets stationCount
     *
     * @param int $stationCount station_count integer
     *
     * @return $this
     */
    public function setStationCount($stationCount)
    {
        $this->container['stationCount'] = $stationCount;

        return $this;
    }

    /**
     * Gets stationSystemCount
     *
     * @return int
     */
    public function getStationSystemCount()
    {
        return $this->container['stationSystemCount'];
    }

    /**
     * Sets stationSystemCount
     *
     * @param int $stationSystemCount station_system_count integer
     *
     * @return $this
     */
    public function setStationSystemCount($stationSystemCount)
    {
        $this->container['stationSystemCount'] = $stationSystemCount;

        return $this;
    }

    /**
     * Gets isUnique
     *
     * @return bool
     */
    public function getIsUnique()
    {
        return $this->container['isUnique'];
    }

    /**
     * Sets isUnique
     *
     * @param bool $isUnique is_unique boolean
     *
     * @return $this
     */
    public function setIsUnique($isUnique)
    {
        $this->container['isUnique'] = $isUnique;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


