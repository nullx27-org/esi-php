<?php
/**
 * GetCorporationsCorporationIdWalletsDivisionJournalExtraInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetCorporationsCorporationIdWalletsDivisionJournalExtraInfo Class Doc Comment
 *
 * @category Class
 * @description Extra information for different type of transaction
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetCorporationsCorporationIdWalletsDivisionJournalExtraInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_corporations_corporation_id_wallets_division_journal_extra_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'locationId' => 'int',
        'transactionId' => 'int',
        'npcName' => 'string',
        'npcId' => 'int',
        'destroyedShipTypeId' => 'int',
        'characterId' => 'int',
        'corporationId' => 'int',
        'allianceId' => 'int',
        'jobId' => 'int',
        'contractId' => 'int',
        'systemId' => 'int',
        'planetId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'locationId' => 'int64',
        'transactionId' => 'int64',
        'npcName' => null,
        'npcId' => 'int32',
        'destroyedShipTypeId' => 'int32',
        'characterId' => 'int32',
        'corporationId' => 'int32',
        'allianceId' => 'int32',
        'jobId' => 'int32',
        'contractId' => 'int32',
        'systemId' => 'int32',
        'planetId' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'locationId' => 'location_id',
        'transactionId' => 'transaction_id',
        'npcName' => 'npc_name',
        'npcId' => 'npc_id',
        'destroyedShipTypeId' => 'destroyed_ship_type_id',
        'characterId' => 'character_id',
        'corporationId' => 'corporation_id',
        'allianceId' => 'alliance_id',
        'jobId' => 'job_id',
        'contractId' => 'contract_id',
        'systemId' => 'system_id',
        'planetId' => 'planet_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'locationId' => 'setLocationId',
        'transactionId' => 'setTransactionId',
        'npcName' => 'setNpcName',
        'npcId' => 'setNpcId',
        'destroyedShipTypeId' => 'setDestroyedShipTypeId',
        'characterId' => 'setCharacterId',
        'corporationId' => 'setCorporationId',
        'allianceId' => 'setAllianceId',
        'jobId' => 'setJobId',
        'contractId' => 'setContractId',
        'systemId' => 'setSystemId',
        'planetId' => 'setPlanetId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'locationId' => 'getLocationId',
        'transactionId' => 'getTransactionId',
        'npcName' => 'getNpcName',
        'npcId' => 'getNpcId',
        'destroyedShipTypeId' => 'getDestroyedShipTypeId',
        'characterId' => 'getCharacterId',
        'corporationId' => 'getCorporationId',
        'allianceId' => 'getAllianceId',
        'jobId' => 'getJobId',
        'contractId' => 'getContractId',
        'systemId' => 'getSystemId',
        'planetId' => 'getPlanetId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['locationId'] = isset($data['locationId']) ? $data['locationId'] : null;
        $this->container['transactionId'] = isset($data['transactionId']) ? $data['transactionId'] : null;
        $this->container['npcName'] = isset($data['npcName']) ? $data['npcName'] : null;
        $this->container['npcId'] = isset($data['npcId']) ? $data['npcId'] : null;
        $this->container['destroyedShipTypeId'] = isset($data['destroyedShipTypeId']) ? $data['destroyedShipTypeId'] : null;
        $this->container['characterId'] = isset($data['characterId']) ? $data['characterId'] : null;
        $this->container['corporationId'] = isset($data['corporationId']) ? $data['corporationId'] : null;
        $this->container['allianceId'] = isset($data['allianceId']) ? $data['allianceId'] : null;
        $this->container['jobId'] = isset($data['jobId']) ? $data['jobId'] : null;
        $this->container['contractId'] = isset($data['contractId']) ? $data['contractId'] : null;
        $this->container['systemId'] = isset($data['systemId']) ? $data['systemId'] : null;
        $this->container['planetId'] = isset($data['planetId']) ? $data['planetId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets locationId
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['locationId'];
    }

    /**
     * Sets locationId
     *
     * @param int $locationId location_id integer
     *
     * @return $this
     */
    public function setLocationId($locationId)
    {
        $this->container['locationId'] = $locationId;

        return $this;
    }

    /**
     * Gets transactionId
     *
     * @return int
     */
    public function getTransactionId()
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     *
     * @param int $transactionId transaction_id integer
     *
     * @return $this
     */
    public function setTransactionId($transactionId)
    {
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets npcName
     *
     * @return string
     */
    public function getNpcName()
    {
        return $this->container['npcName'];
    }

    /**
     * Sets npcName
     *
     * @param string $npcName npc_name string
     *
     * @return $this
     */
    public function setNpcName($npcName)
    {
        $this->container['npcName'] = $npcName;

        return $this;
    }

    /**
     * Gets npcId
     *
     * @return int
     */
    public function getNpcId()
    {
        return $this->container['npcId'];
    }

    /**
     * Sets npcId
     *
     * @param int $npcId npc_id integer
     *
     * @return $this
     */
    public function setNpcId($npcId)
    {
        $this->container['npcId'] = $npcId;

        return $this;
    }

    /**
     * Gets destroyedShipTypeId
     *
     * @return int
     */
    public function getDestroyedShipTypeId()
    {
        return $this->container['destroyedShipTypeId'];
    }

    /**
     * Sets destroyedShipTypeId
     *
     * @param int $destroyedShipTypeId destroyed_ship_type_id integer
     *
     * @return $this
     */
    public function setDestroyedShipTypeId($destroyedShipTypeId)
    {
        $this->container['destroyedShipTypeId'] = $destroyedShipTypeId;

        return $this;
    }

    /**
     * Gets characterId
     *
     * @return int
     */
    public function getCharacterId()
    {
        return $this->container['characterId'];
    }

    /**
     * Sets characterId
     *
     * @param int $characterId character_id integer
     *
     * @return $this
     */
    public function setCharacterId($characterId)
    {
        $this->container['characterId'] = $characterId;

        return $this;
    }

    /**
     * Gets corporationId
     *
     * @return int
     */
    public function getCorporationId()
    {
        return $this->container['corporationId'];
    }

    /**
     * Sets corporationId
     *
     * @param int $corporationId corporation_id integer
     *
     * @return $this
     */
    public function setCorporationId($corporationId)
    {
        $this->container['corporationId'] = $corporationId;

        return $this;
    }

    /**
     * Gets allianceId
     *
     * @return int
     */
    public function getAllianceId()
    {
        return $this->container['allianceId'];
    }

    /**
     * Sets allianceId
     *
     * @param int $allianceId alliance_id integer
     *
     * @return $this
     */
    public function setAllianceId($allianceId)
    {
        $this->container['allianceId'] = $allianceId;

        return $this;
    }

    /**
     * Gets jobId
     *
     * @return int
     */
    public function getJobId()
    {
        return $this->container['jobId'];
    }

    /**
     * Sets jobId
     *
     * @param int $jobId job_id integer
     *
     * @return $this
     */
    public function setJobId($jobId)
    {
        $this->container['jobId'] = $jobId;

        return $this;
    }

    /**
     * Gets contractId
     *
     * @return int
     */
    public function getContractId()
    {
        return $this->container['contractId'];
    }

    /**
     * Sets contractId
     *
     * @param int $contractId contract_id integer
     *
     * @return $this
     */
    public function setContractId($contractId)
    {
        $this->container['contractId'] = $contractId;

        return $this;
    }

    /**
     * Gets systemId
     *
     * @return int
     */
    public function getSystemId()
    {
        return $this->container['systemId'];
    }

    /**
     * Sets systemId
     *
     * @param int $systemId system_id integer
     *
     * @return $this
     */
    public function setSystemId($systemId)
    {
        $this->container['systemId'] = $systemId;

        return $this;
    }

    /**
     * Gets planetId
     *
     * @return int
     */
    public function getPlanetId()
    {
        return $this->container['planetId'];
    }

    /**
     * Sets planetId
     *
     * @param int $planetId planet_id integer
     *
     * @return $this
     */
    public function setPlanetId($planetId)
    {
        $this->container['planetId'] = $planetId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


