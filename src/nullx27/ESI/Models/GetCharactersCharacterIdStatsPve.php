<?php
/**
 * GetCharactersCharacterIdStatsPve
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetCharactersCharacterIdStatsPve Class Doc Comment
 *
 * @category Class
 * @description pve object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetCharactersCharacterIdStatsPve implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_characters_character_id_stats_pve';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dungeonsCompletedAgent' => 'int',
        'dungeonsCompletedDistribution' => 'int',
        'missionsSucceeded' => 'int',
        'missionsSucceededEpicArc' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dungeonsCompletedAgent' => 'int64',
        'dungeonsCompletedDistribution' => 'int64',
        'missionsSucceeded' => 'int64',
        'missionsSucceededEpicArc' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dungeonsCompletedAgent' => 'dungeons_completed_agent',
        'dungeonsCompletedDistribution' => 'dungeons_completed_distribution',
        'missionsSucceeded' => 'missions_succeeded',
        'missionsSucceededEpicArc' => 'missions_succeeded_epic_arc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dungeonsCompletedAgent' => 'setDungeonsCompletedAgent',
        'dungeonsCompletedDistribution' => 'setDungeonsCompletedDistribution',
        'missionsSucceeded' => 'setMissionsSucceeded',
        'missionsSucceededEpicArc' => 'setMissionsSucceededEpicArc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dungeonsCompletedAgent' => 'getDungeonsCompletedAgent',
        'dungeonsCompletedDistribution' => 'getDungeonsCompletedDistribution',
        'missionsSucceeded' => 'getMissionsSucceeded',
        'missionsSucceededEpicArc' => 'getMissionsSucceededEpicArc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dungeonsCompletedAgent'] = isset($data['dungeonsCompletedAgent']) ? $data['dungeonsCompletedAgent'] : null;
        $this->container['dungeonsCompletedDistribution'] = isset($data['dungeonsCompletedDistribution']) ? $data['dungeonsCompletedDistribution'] : null;
        $this->container['missionsSucceeded'] = isset($data['missionsSucceeded']) ? $data['missionsSucceeded'] : null;
        $this->container['missionsSucceededEpicArc'] = isset($data['missionsSucceededEpicArc']) ? $data['missionsSucceededEpicArc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets dungeonsCompletedAgent
     *
     * @return int
     */
    public function getDungeonsCompletedAgent()
    {
        return $this->container['dungeonsCompletedAgent'];
    }

    /**
     * Sets dungeonsCompletedAgent
     *
     * @param int $dungeonsCompletedAgent dungeons_completed_agent integer
     *
     * @return $this
     */
    public function setDungeonsCompletedAgent($dungeonsCompletedAgent)
    {
        $this->container['dungeonsCompletedAgent'] = $dungeonsCompletedAgent;

        return $this;
    }

    /**
     * Gets dungeonsCompletedDistribution
     *
     * @return int
     */
    public function getDungeonsCompletedDistribution()
    {
        return $this->container['dungeonsCompletedDistribution'];
    }

    /**
     * Sets dungeonsCompletedDistribution
     *
     * @param int $dungeonsCompletedDistribution dungeons_completed_distribution integer
     *
     * @return $this
     */
    public function setDungeonsCompletedDistribution($dungeonsCompletedDistribution)
    {
        $this->container['dungeonsCompletedDistribution'] = $dungeonsCompletedDistribution;

        return $this;
    }

    /**
     * Gets missionsSucceeded
     *
     * @return int
     */
    public function getMissionsSucceeded()
    {
        return $this->container['missionsSucceeded'];
    }

    /**
     * Sets missionsSucceeded
     *
     * @param int $missionsSucceeded missions_succeeded integer
     *
     * @return $this
     */
    public function setMissionsSucceeded($missionsSucceeded)
    {
        $this->container['missionsSucceeded'] = $missionsSucceeded;

        return $this;
    }

    /**
     * Gets missionsSucceededEpicArc
     *
     * @return int
     */
    public function getMissionsSucceededEpicArc()
    {
        return $this->container['missionsSucceededEpicArc'];
    }

    /**
     * Sets missionsSucceededEpicArc
     *
     * @param int $missionsSucceededEpicArc missions_succeeded_epic_arc integer
     *
     * @return $this
     */
    public function setMissionsSucceededEpicArc($missionsSucceededEpicArc)
    {
        $this->container['missionsSucceededEpicArc'] = $missionsSucceededEpicArc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


