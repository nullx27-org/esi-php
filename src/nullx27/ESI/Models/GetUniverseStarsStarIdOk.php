<?php
/**
 * GetUniverseStarsStarIdOk
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetUniverseStarsStarIdOk Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetUniverseStarsStarIdOk implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_universe_stars_star_id_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'solarSystemId' => 'int',
        'typeId' => 'int',
        'age' => 'int',
        'luminosity' => 'float',
        'radius' => 'int',
        'spectralClass' => 'string',
        'temperature' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'solarSystemId' => 'int32',
        'typeId' => 'int32',
        'age' => 'int64',
        'luminosity' => 'float',
        'radius' => 'int64',
        'spectralClass' => null,
        'temperature' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'solarSystemId' => 'solar_system_id',
        'typeId' => 'type_id',
        'age' => 'age',
        'luminosity' => 'luminosity',
        'radius' => 'radius',
        'spectralClass' => 'spectral_class',
        'temperature' => 'temperature'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'solarSystemId' => 'setSolarSystemId',
        'typeId' => 'setTypeId',
        'age' => 'setAge',
        'luminosity' => 'setLuminosity',
        'radius' => 'setRadius',
        'spectralClass' => 'setSpectralClass',
        'temperature' => 'setTemperature'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'solarSystemId' => 'getSolarSystemId',
        'typeId' => 'getTypeId',
        'age' => 'getAge',
        'luminosity' => 'getLuminosity',
        'radius' => 'getRadius',
        'spectralClass' => 'getSpectralClass',
        'temperature' => 'getTemperature'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SPECTRAL_CLASS_K2_V = 'K2 V';
    const SPECTRAL_CLASS_K4_V = 'K4 V';
    const SPECTRAL_CLASS_G2_V = 'G2 V';
    const SPECTRAL_CLASS_G8_V = 'G8 V';
    const SPECTRAL_CLASS_M7_V = 'M7 V';
    const SPECTRAL_CLASS_K7_V = 'K7 V';
    const SPECTRAL_CLASS_M2_V = 'M2 V';
    const SPECTRAL_CLASS_K5_V = 'K5 V';
    const SPECTRAL_CLASS_M3_V = 'M3 V';
    const SPECTRAL_CLASS_G0_V = 'G0 V';
    const SPECTRAL_CLASS_G7_V = 'G7 V';
    const SPECTRAL_CLASS_G3_V = 'G3 V';
    const SPECTRAL_CLASS_F9_V = 'F9 V';
    const SPECTRAL_CLASS_G5_V = 'G5 V';
    const SPECTRAL_CLASS_F6_V = 'F6 V';
    const SPECTRAL_CLASS_K8_V = 'K8 V';
    const SPECTRAL_CLASS_K9_V = 'K9 V';
    const SPECTRAL_CLASS_K6_V = 'K6 V';
    const SPECTRAL_CLASS_G9_V = 'G9 V';
    const SPECTRAL_CLASS_G6_V = 'G6 V';
    const SPECTRAL_CLASS_G4_VI = 'G4 VI';
    const SPECTRAL_CLASS_G4_V = 'G4 V';
    const SPECTRAL_CLASS_F8_V = 'F8 V';
    const SPECTRAL_CLASS_F2_V = 'F2 V';
    const SPECTRAL_CLASS_F1_V = 'F1 V';
    const SPECTRAL_CLASS_K3_V = 'K3 V';
    const SPECTRAL_CLASS_F0_VI = 'F0 VI';
    const SPECTRAL_CLASS_G1_VI = 'G1 VI';
    const SPECTRAL_CLASS_G0_VI = 'G0 VI';
    const SPECTRAL_CLASS_K1_V = 'K1 V';
    const SPECTRAL_CLASS_M4_V = 'M4 V';
    const SPECTRAL_CLASS_M1_V = 'M1 V';
    const SPECTRAL_CLASS_M6_V = 'M6 V';
    const SPECTRAL_CLASS_M0_V = 'M0 V';
    const SPECTRAL_CLASS_K2_IV = 'K2 IV';
    const SPECTRAL_CLASS_G2_VI = 'G2 VI';
    const SPECTRAL_CLASS_K0_V = 'K0 V';
    const SPECTRAL_CLASS_K5_IV = 'K5 IV';
    const SPECTRAL_CLASS_F5_VI = 'F5 VI';
    const SPECTRAL_CLASS_G6_VI = 'G6 VI';
    const SPECTRAL_CLASS_F6_VI = 'F6 VI';
    const SPECTRAL_CLASS_F2_IV = 'F2 IV';
    const SPECTRAL_CLASS_G3_VI = 'G3 VI';
    const SPECTRAL_CLASS_M8_V = 'M8 V';
    const SPECTRAL_CLASS_F1_VI = 'F1 VI';
    const SPECTRAL_CLASS_K1_IV = 'K1 IV';
    const SPECTRAL_CLASS_F7_V = 'F7 V';
    const SPECTRAL_CLASS_G5_VI = 'G5 VI';
    const SPECTRAL_CLASS_M5_V = 'M5 V';
    const SPECTRAL_CLASS_G7_VI = 'G7 VI';
    const SPECTRAL_CLASS_F5_V = 'F5 V';
    const SPECTRAL_CLASS_F4_VI = 'F4 VI';
    const SPECTRAL_CLASS_F8_VI = 'F8 VI';
    const SPECTRAL_CLASS_K3_IV = 'K3 IV';
    const SPECTRAL_CLASS_F4_IV = 'F4 IV';
    const SPECTRAL_CLASS_F0_V = 'F0 V';
    const SPECTRAL_CLASS_G7_IV = 'G7 IV';
    const SPECTRAL_CLASS_G8_VI = 'G8 VI';
    const SPECTRAL_CLASS_F2_VI = 'F2 VI';
    const SPECTRAL_CLASS_F4_V = 'F4 V';
    const SPECTRAL_CLASS_F7_VI = 'F7 VI';
    const SPECTRAL_CLASS_F3_V = 'F3 V';
    const SPECTRAL_CLASS_G1_V = 'G1 V';
    const SPECTRAL_CLASS_G9_VI = 'G9 VI';
    const SPECTRAL_CLASS_F3_IV = 'F3 IV';
    const SPECTRAL_CLASS_F9_VI = 'F9 VI';
    const SPECTRAL_CLASS_M9_V = 'M9 V';
    const SPECTRAL_CLASS_K0_IV = 'K0 IV';
    const SPECTRAL_CLASS_F1_IV = 'F1 IV';
    const SPECTRAL_CLASS_G4_IV = 'G4 IV';
    const SPECTRAL_CLASS_F3_VI = 'F3 VI';
    const SPECTRAL_CLASS_K4_IV = 'K4 IV';
    const SPECTRAL_CLASS_G5_IV = 'G5 IV';
    const SPECTRAL_CLASS_G3_IV = 'G3 IV';
    const SPECTRAL_CLASS_G1_IV = 'G1 IV';
    const SPECTRAL_CLASS_K7_IV = 'K7 IV';
    const SPECTRAL_CLASS_G0_IV = 'G0 IV';
    const SPECTRAL_CLASS_K6_IV = 'K6 IV';
    const SPECTRAL_CLASS_K9_IV = 'K9 IV';
    const SPECTRAL_CLASS_G2_IV = 'G2 IV';
    const SPECTRAL_CLASS_F9_IV = 'F9 IV';
    const SPECTRAL_CLASS_F0_IV = 'F0 IV';
    const SPECTRAL_CLASS_K8_IV = 'K8 IV';
    const SPECTRAL_CLASS_G8_IV = 'G8 IV';
    const SPECTRAL_CLASS_F6_IV = 'F6 IV';
    const SPECTRAL_CLASS_F5_IV = 'F5 IV';
    const SPECTRAL_CLASS_A0 = 'A0';
    const SPECTRAL_CLASS_A0_IV = 'A0IV';
    const SPECTRAL_CLASS_A0_IV2 = 'A0IV2';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSpectralClassAllowableValues()
    {
        return [
            self::SPECTRAL_CLASS_K2_V,
            self::SPECTRAL_CLASS_K4_V,
            self::SPECTRAL_CLASS_G2_V,
            self::SPECTRAL_CLASS_G8_V,
            self::SPECTRAL_CLASS_M7_V,
            self::SPECTRAL_CLASS_K7_V,
            self::SPECTRAL_CLASS_M2_V,
            self::SPECTRAL_CLASS_K5_V,
            self::SPECTRAL_CLASS_M3_V,
            self::SPECTRAL_CLASS_G0_V,
            self::SPECTRAL_CLASS_G7_V,
            self::SPECTRAL_CLASS_G3_V,
            self::SPECTRAL_CLASS_F9_V,
            self::SPECTRAL_CLASS_G5_V,
            self::SPECTRAL_CLASS_F6_V,
            self::SPECTRAL_CLASS_K8_V,
            self::SPECTRAL_CLASS_K9_V,
            self::SPECTRAL_CLASS_K6_V,
            self::SPECTRAL_CLASS_G9_V,
            self::SPECTRAL_CLASS_G6_V,
            self::SPECTRAL_CLASS_G4_VI,
            self::SPECTRAL_CLASS_G4_V,
            self::SPECTRAL_CLASS_F8_V,
            self::SPECTRAL_CLASS_F2_V,
            self::SPECTRAL_CLASS_F1_V,
            self::SPECTRAL_CLASS_K3_V,
            self::SPECTRAL_CLASS_F0_VI,
            self::SPECTRAL_CLASS_G1_VI,
            self::SPECTRAL_CLASS_G0_VI,
            self::SPECTRAL_CLASS_K1_V,
            self::SPECTRAL_CLASS_M4_V,
            self::SPECTRAL_CLASS_M1_V,
            self::SPECTRAL_CLASS_M6_V,
            self::SPECTRAL_CLASS_M0_V,
            self::SPECTRAL_CLASS_K2_IV,
            self::SPECTRAL_CLASS_G2_VI,
            self::SPECTRAL_CLASS_K0_V,
            self::SPECTRAL_CLASS_K5_IV,
            self::SPECTRAL_CLASS_F5_VI,
            self::SPECTRAL_CLASS_G6_VI,
            self::SPECTRAL_CLASS_F6_VI,
            self::SPECTRAL_CLASS_F2_IV,
            self::SPECTRAL_CLASS_G3_VI,
            self::SPECTRAL_CLASS_M8_V,
            self::SPECTRAL_CLASS_F1_VI,
            self::SPECTRAL_CLASS_K1_IV,
            self::SPECTRAL_CLASS_F7_V,
            self::SPECTRAL_CLASS_G5_VI,
            self::SPECTRAL_CLASS_M5_V,
            self::SPECTRAL_CLASS_G7_VI,
            self::SPECTRAL_CLASS_F5_V,
            self::SPECTRAL_CLASS_F4_VI,
            self::SPECTRAL_CLASS_F8_VI,
            self::SPECTRAL_CLASS_K3_IV,
            self::SPECTRAL_CLASS_F4_IV,
            self::SPECTRAL_CLASS_F0_V,
            self::SPECTRAL_CLASS_G7_IV,
            self::SPECTRAL_CLASS_G8_VI,
            self::SPECTRAL_CLASS_F2_VI,
            self::SPECTRAL_CLASS_F4_V,
            self::SPECTRAL_CLASS_F7_VI,
            self::SPECTRAL_CLASS_F3_V,
            self::SPECTRAL_CLASS_G1_V,
            self::SPECTRAL_CLASS_G9_VI,
            self::SPECTRAL_CLASS_F3_IV,
            self::SPECTRAL_CLASS_F9_VI,
            self::SPECTRAL_CLASS_M9_V,
            self::SPECTRAL_CLASS_K0_IV,
            self::SPECTRAL_CLASS_F1_IV,
            self::SPECTRAL_CLASS_G4_IV,
            self::SPECTRAL_CLASS_F3_VI,
            self::SPECTRAL_CLASS_K4_IV,
            self::SPECTRAL_CLASS_G5_IV,
            self::SPECTRAL_CLASS_G3_IV,
            self::SPECTRAL_CLASS_G1_IV,
            self::SPECTRAL_CLASS_K7_IV,
            self::SPECTRAL_CLASS_G0_IV,
            self::SPECTRAL_CLASS_K6_IV,
            self::SPECTRAL_CLASS_K9_IV,
            self::SPECTRAL_CLASS_G2_IV,
            self::SPECTRAL_CLASS_F9_IV,
            self::SPECTRAL_CLASS_F0_IV,
            self::SPECTRAL_CLASS_K8_IV,
            self::SPECTRAL_CLASS_G8_IV,
            self::SPECTRAL_CLASS_F6_IV,
            self::SPECTRAL_CLASS_F5_IV,
            self::SPECTRAL_CLASS_A0,
            self::SPECTRAL_CLASS_A0_IV,
            self::SPECTRAL_CLASS_A0_IV2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['solarSystemId'] = isset($data['solarSystemId']) ? $data['solarSystemId'] : null;
        $this->container['typeId'] = isset($data['typeId']) ? $data['typeId'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
        $this->container['luminosity'] = isset($data['luminosity']) ? $data['luminosity'] : null;
        $this->container['radius'] = isset($data['radius']) ? $data['radius'] : null;
        $this->container['spectralClass'] = isset($data['spectralClass']) ? $data['spectralClass'] : null;
        $this->container['temperature'] = isset($data['temperature']) ? $data['temperature'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['solarSystemId'] === null) {
            $invalidProperties[] = "'solarSystemId' can't be null";
        }
        if ($this->container['typeId'] === null) {
            $invalidProperties[] = "'typeId' can't be null";
        }
        if ($this->container['age'] === null) {
            $invalidProperties[] = "'age' can't be null";
        }
        if ($this->container['luminosity'] === null) {
            $invalidProperties[] = "'luminosity' can't be null";
        }
        if ($this->container['radius'] === null) {
            $invalidProperties[] = "'radius' can't be null";
        }
        if ($this->container['spectralClass'] === null) {
            $invalidProperties[] = "'spectralClass' can't be null";
        }
        $allowedValues = $this->getSpectralClassAllowableValues();
        if (!in_array($this->container['spectralClass'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'spectralClass', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['temperature'] === null) {
            $invalidProperties[] = "'temperature' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['solarSystemId'] === null) {
            return false;
        }
        if ($this->container['typeId'] === null) {
            return false;
        }
        if ($this->container['age'] === null) {
            return false;
        }
        if ($this->container['luminosity'] === null) {
            return false;
        }
        if ($this->container['radius'] === null) {
            return false;
        }
        if ($this->container['spectralClass'] === null) {
            return false;
        }
        $allowedValues = $this->getSpectralClassAllowableValues();
        if (!in_array($this->container['spectralClass'], $allowedValues)) {
            return false;
        }
        if ($this->container['temperature'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name string
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets solarSystemId
     *
     * @return int
     */
    public function getSolarSystemId()
    {
        return $this->container['solarSystemId'];
    }

    /**
     * Sets solarSystemId
     *
     * @param int $solarSystemId solar_system_id integer
     *
     * @return $this
     */
    public function setSolarSystemId($solarSystemId)
    {
        $this->container['solarSystemId'] = $solarSystemId;

        return $this;
    }

    /**
     * Gets typeId
     *
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     *
     * @param int $typeId type_id integer
     *
     * @return $this
     */
    public function setTypeId($typeId)
    {
        $this->container['typeId'] = $typeId;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int $age Age of star in years
     *
     * @return $this
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets luminosity
     *
     * @return float
     */
    public function getLuminosity()
    {
        return $this->container['luminosity'];
    }

    /**
     * Sets luminosity
     *
     * @param float $luminosity luminosity number
     *
     * @return $this
     */
    public function setLuminosity($luminosity)
    {
        $this->container['luminosity'] = $luminosity;

        return $this;
    }

    /**
     * Gets radius
     *
     * @return int
     */
    public function getRadius()
    {
        return $this->container['radius'];
    }

    /**
     * Sets radius
     *
     * @param int $radius radius integer
     *
     * @return $this
     */
    public function setRadius($radius)
    {
        $this->container['radius'] = $radius;

        return $this;
    }

    /**
     * Gets spectralClass
     *
     * @return string
     */
    public function getSpectralClass()
    {
        return $this->container['spectralClass'];
    }

    /**
     * Sets spectralClass
     *
     * @param string $spectralClass spectral_class string
     *
     * @return $this
     */
    public function setSpectralClass($spectralClass)
    {
        $allowedValues = $this->getSpectralClassAllowableValues();
        if (!in_array($spectralClass, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'spectralClass', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['spectralClass'] = $spectralClass;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return int
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param int $temperature temperature integer
     *
     * @return $this
     */
    public function setTemperature($temperature)
    {
        $this->container['temperature'] = $temperature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


