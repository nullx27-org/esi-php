<?php
/**
 * GetFwSystems200Ok
 *
 * PHP version 5
 *
 * @category Class
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.7.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace nullx27\ESI\nullx27\ESI\Models;

use \ArrayAccess;
use \nullx27\ESI\ObjectSerializer;

/**
 * GetFwSystems200Ok Class Doc Comment
 *
 * @category Class
 * @description 200 ok object
 * @package  nullx27\ESI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetFwSystems200Ok implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'get_fw_systems_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'solarSystemId' => 'int',
        'ownerFactionId' => 'int',
        'occupierFactionId' => 'int',
        'victoryPoints' => 'int',
        'victoryPointsThreshold' => 'int',
        'contested' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'solarSystemId' => 'int32',
        'ownerFactionId' => 'int32',
        'occupierFactionId' => 'int32',
        'victoryPoints' => 'int32',
        'victoryPointsThreshold' => 'int32',
        'contested' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'solarSystemId' => 'solar_system_id',
        'ownerFactionId' => 'owner_faction_id',
        'occupierFactionId' => 'occupier_faction_id',
        'victoryPoints' => 'victory_points',
        'victoryPointsThreshold' => 'victory_points_threshold',
        'contested' => 'contested'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'solarSystemId' => 'setSolarSystemId',
        'ownerFactionId' => 'setOwnerFactionId',
        'occupierFactionId' => 'setOccupierFactionId',
        'victoryPoints' => 'setVictoryPoints',
        'victoryPointsThreshold' => 'setVictoryPointsThreshold',
        'contested' => 'setContested'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'solarSystemId' => 'getSolarSystemId',
        'ownerFactionId' => 'getOwnerFactionId',
        'occupierFactionId' => 'getOccupierFactionId',
        'victoryPoints' => 'getVictoryPoints',
        'victoryPointsThreshold' => 'getVictoryPointsThreshold',
        'contested' => 'getContested'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['solarSystemId'] = isset($data['solarSystemId']) ? $data['solarSystemId'] : null;
        $this->container['ownerFactionId'] = isset($data['ownerFactionId']) ? $data['ownerFactionId'] : null;
        $this->container['occupierFactionId'] = isset($data['occupierFactionId']) ? $data['occupierFactionId'] : null;
        $this->container['victoryPoints'] = isset($data['victoryPoints']) ? $data['victoryPoints'] : null;
        $this->container['victoryPointsThreshold'] = isset($data['victoryPointsThreshold']) ? $data['victoryPointsThreshold'] : null;
        $this->container['contested'] = isset($data['contested']) ? $data['contested'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['solarSystemId'] === null) {
            $invalidProperties[] = "'solarSystemId' can't be null";
        }
        if ($this->container['ownerFactionId'] === null) {
            $invalidProperties[] = "'ownerFactionId' can't be null";
        }
        if ($this->container['occupierFactionId'] === null) {
            $invalidProperties[] = "'occupierFactionId' can't be null";
        }
        if ($this->container['victoryPoints'] === null) {
            $invalidProperties[] = "'victoryPoints' can't be null";
        }
        if ($this->container['victoryPointsThreshold'] === null) {
            $invalidProperties[] = "'victoryPointsThreshold' can't be null";
        }
        if ($this->container['contested'] === null) {
            $invalidProperties[] = "'contested' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['solarSystemId'] === null) {
            return false;
        }
        if ($this->container['ownerFactionId'] === null) {
            return false;
        }
        if ($this->container['occupierFactionId'] === null) {
            return false;
        }
        if ($this->container['victoryPoints'] === null) {
            return false;
        }
        if ($this->container['victoryPointsThreshold'] === null) {
            return false;
        }
        if ($this->container['contested'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets solarSystemId
     *
     * @return int
     */
    public function getSolarSystemId()
    {
        return $this->container['solarSystemId'];
    }

    /**
     * Sets solarSystemId
     *
     * @param int $solarSystemId solar_system_id integer
     *
     * @return $this
     */
    public function setSolarSystemId($solarSystemId)
    {
        $this->container['solarSystemId'] = $solarSystemId;

        return $this;
    }

    /**
     * Gets ownerFactionId
     *
     * @return int
     */
    public function getOwnerFactionId()
    {
        return $this->container['ownerFactionId'];
    }

    /**
     * Sets ownerFactionId
     *
     * @param int $ownerFactionId owner_faction_id integer
     *
     * @return $this
     */
    public function setOwnerFactionId($ownerFactionId)
    {
        $this->container['ownerFactionId'] = $ownerFactionId;

        return $this;
    }

    /**
     * Gets occupierFactionId
     *
     * @return int
     */
    public function getOccupierFactionId()
    {
        return $this->container['occupierFactionId'];
    }

    /**
     * Sets occupierFactionId
     *
     * @param int $occupierFactionId occupier_faction_id integer
     *
     * @return $this
     */
    public function setOccupierFactionId($occupierFactionId)
    {
        $this->container['occupierFactionId'] = $occupierFactionId;

        return $this;
    }

    /**
     * Gets victoryPoints
     *
     * @return int
     */
    public function getVictoryPoints()
    {
        return $this->container['victoryPoints'];
    }

    /**
     * Sets victoryPoints
     *
     * @param int $victoryPoints victory_points integer
     *
     * @return $this
     */
    public function setVictoryPoints($victoryPoints)
    {
        $this->container['victoryPoints'] = $victoryPoints;

        return $this;
    }

    /**
     * Gets victoryPointsThreshold
     *
     * @return int
     */
    public function getVictoryPointsThreshold()
    {
        return $this->container['victoryPointsThreshold'];
    }

    /**
     * Sets victoryPointsThreshold
     *
     * @param int $victoryPointsThreshold victory_points_threshold integer
     *
     * @return $this
     */
    public function setVictoryPointsThreshold($victoryPointsThreshold)
    {
        $this->container['victoryPointsThreshold'] = $victoryPointsThreshold;

        return $this;
    }

    /**
     * Gets contested
     *
     * @return bool
     */
    public function getContested()
    {
        return $this->container['contested'];
    }

    /**
     * Sets contested
     *
     * @param bool $contested contested boolean
     *
     * @return $this
     */
    public function setContested($contested)
    {
        $this->container['contested'] = $contested;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


